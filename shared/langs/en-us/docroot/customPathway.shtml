<!DOCTYPE html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no">
    <title>Bootstrap: Materials</title>
    <link rel="stylesheet" href="lib/curriculum.css">
    <link rel="stylesheet" type="text/css" href="https://www.BootstrapWorld.org/styles.css"/>
    <style>
        .logo img { width: 300px; }
        dl { counter-reset: term; }

        dl > dt:before {
            counter-increment: term;
            content: counter(term) ".";
            margin-right: 5px;
        }
    </style>
    <script src="dependency-graph.js"></script>
    <script src="https://unpkg.com/pdf-lib@1.4.0"></script>
    <script src="https://unpkg.com/downloadjs@1.4.7"></script>
    <script>
        // load required symbols, trim the dependency graph
        const { PDFDocument, rgb, degrees } = PDFLib
        var graph = graph, lessons = [], pathway = "Custom Pathway";
        const lessonsToIgnore = ['__sample-lesson','__sample-lesson-wescheme', 'zample-lesson', 'hoc-wescheme-intro', 'hoc-winter', 'hoc-winter-parley', '__sample-lesson-codap', 'codap-bar-charts-codap', 'codap-exploring-codap', 'codap-transformers-1-codap', 'codap-transformers-2-codap', 'composing-table-operations-codap', 'computing-needs-all-voices-codap', 'data-cycle-codap', 'ds-intro-codap', 'ethics-privacy-and-bias-codap', 'grouped-samples-codap', 'composing-table-operations-codap', 'probability-inference-codap', 'project-exploration-paper-codap', 'sw-what-ships-carried-spreadsheets', 'sw-where-in-asia-spreadsheets','exploring-linear-relationships','exploring-quadratic-relationships','exploring-logarithmic-relationships','maya-skulls-spreadsheets', 'maya-1-spreadsheets'];
        lessonsToIgnore.forEach(l => delete graph[l]);

       // used with [].filter to produce an array of unique elts
        const onlyUnique = (value, index, self) => self.indexOf(value) === index;
        const getPrereqs = (l) => {
            if(!graph[l]) {
                throw "an unknown lesson was passed to getPrereqs:" + l;
            }
            return graph[l].prerequisites.concat(...graph[l].prerequisites.map(getPrereqs));
        }

        // recursively compute all prerequisites for each lesson and project
        Object.keys(graph).forEach(k =>
            graph[k].prerequisites = getPrereqs(k).filter(onlyUnique));

        function populateLessonList(ul, lessonNames, showDescription) {
            var search = location.search.substring(1);
            lessons.forEach(l => {
                var lesson = graph[l];
                var dt = document.createElement('dt');
                dt.className = "hdlist1";
                dt.innerHTML = `<dt class="hdlist1"><a href="./lessons/${l}/index.shtml?${search}">${lesson.title}</a></dt>`;
                if(showDescription) {
                    dt.innerHTML += `<dd><p>${lesson.description}</p></dd>`
                };
                ul.appendChild(dt);
            });
        }

        // Based on an example at https://jsfiddle.net/Hopding/Lyb16ocj/13/
        function populateLessons() {
            var search = location.search.substring(1);
            var {pathway, lessons, proglang} = JSON.parse('{"' + decodeURI(search).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g,'":"') + '"}');
            window.lessons = lessons = lessons.split(",");

            document.getElementById('pathwayTitle').innerHTML = pathway;
            var lessonList = document.getElementById('lesson-list').children[0];
            populateLessonList(lessonList, lessons, true);

            // update the list of accessible lessons
            var accessibleList = document.getElementById('accessible-lesson-list');
            var accessible =  Object.getOwnPropertyNames(graph)
                .filter(name => graph[name].prerequisites
                    .every(p => lessons.includes(p)))
                .filter(name => graph[name].proglang == proglang)
                .filter(name => !lessons.includes(name))
                .filter(onlyUnique)
                .sort((a,b) => 
                graph[a].prerequisites.length > graph[b].prerequisites.length? 1 : -1);
            console.log('lessons are', lessons);
            console.log('accessible', accessible);

            populateLessonList(accessibleList, accessible, true)
        }

        async function printWorkook(lessons, graph) {
            console.log('printing', lessons);
            const pdfDoc = await PDFDocument.create();
            // print out wb page paths
            var pageUrls = lessons
                .map(l => graph[l].pages
                    .filter(p => p !== "")
                    .map(p => 
                        "lessons/"+l+"/pages/"+p))
                .flat()
                .map(p => p.replace(".adoc", ".pdf"))
                .map(p => p.replace(" landscape", ""));

            document.getElementById('status').innerHTML = "0 / " + pageUrls.length;
            console.log(pageUrls)

        for (const [idx, url] of pageUrls.entries()) {
            console.log(idx, url);
            const page = pdfDoc.addPage();
            const bytes = await fetch(url).then((res) => res.arrayBuffer());
            const [embedded] = await pdfDoc.embedPdf(bytes);
            const dimensions = embedded.scale(1.0);
            const isRightHand= idx%2 == 0;

            const portrait = {
              x: (page.getWidth()  / 2) - dimensions.width  / 2,
              y: (page.getHeight() / 2) - dimensions.height / 2,
            };

            const landscape = {
              x: isRightHand? page.getWidth() :        0        ,
              y: isRightHand?       0         : page.getHeight(),
              rotate: degrees(isRightHand? 90 : -90),
            };

            const isLandscape  = dimensions.width > dimensions.height;
            const pageSettings = isLandscape? landscape : portrait;

            page.drawPage(embedded, {...dimensions, ...pageSettings});

            document.getElementById('status').innerHTML = (idx+1) +"/"+ pageUrls.length;

            if(idx <= 1 ) continue;
            page.drawText(String(idx - 1), {
              x: page.getWidth() / 2,
              y: 35,
              size: 8,
              color: rgb(0,0,0),
              rotateDegrees: isLandscape ? -90 : 0
            })
          }

          // Serialize the PDFDocument to bytes (a Uint8Array)
          const pdfBytes = await pdfDoc.save()
          download(pdfBytes, pathway + "- Student Workbook.pdf", "application/pdf");
        }
    </script>
</head>

<body class="narrativepage article narrative pyret" onload="populateLessons()">
    <!--#include virtual="/menubar.ssi" -->
    <div id="body">
        <div id="header">
            <h1 id="pathwayTitle" style="border-bottom: none;"></h1>
        </div>
        <div id="content">
            <div id="preamble_disabled" class="lessonSummary">
                <div class="sect1">
                    <div class="paragraph">
                        <p>This is a custom pathway, created just for you. <b>Be sure to bookmark this page</b>, so that you can return to it!</p>
                    </div>
                </div>
            </div>

        <div class="clearfix item bottom-border">
            <h2>Lesson Plans</h2>
            <div class="sectionbody">
                <div id="lesson-list" class="dlist">
                    <dl>
                    </dl>
                </div>
            </div>
        </div>

        <div class="clearfix item bottom-border">
            <button onclick="printWorkook(lessons, graph)">Print Workbook</button>
            <span id="status"></span>
        </div>

        <div class="clearfix item bottom-border">
            <h2>What's Next?</h2>
            <p/>
            Once your students have finished this pathway, they can jump right into <i>any</i> of the following lessons:
            <ul id="accessible-lesson-list">
            </ul>
        </div>
    </div>
</body>
</html>
