<html moznomarginboxes="">
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8">
      <title>Bootstrap :: Hour of Code</title>
      <link   type="text/css"        rel="stylesheet" href="css/hoc.css" title="default"/>
      <script type="text/javascript" src="js/hoc.js"></script>
      <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML"></script>
      <link href="./repartee/static/css/main.chunk.css" rel="stylesheet">
      <script src="./repartee/static/js/bundle.js"></script>
      <script src="./repartee/static/js/main.chunk.js"></script>
      <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
          tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]},
          "HTML-CSS": { scale: 80, linebreaks: { automatic: true } },
         });
        </script>
      </head>
  <body>
    <div id="banner">
      <img src="images/icon.png" height="50"><span>Bootstrap :: Winter Hour of Code</span>
    </div>
    <div id="progressbar"></div>
    <a id="prev" href="#" onclick="javascript:previousCard()">&#171;</a>
    <a id="next" href="#" onclick="javascript:nextCard()">&#187;</a>
    <a id="reset" href="#" onclick="javascript:nextCard()">ðŸ”„</a>
    <div id="lesson">
      <ul id="cards">

        <!----   Page 1 ---->
        <li editorCode='
include essentials2021
text("Hello!", 200, "purple")
        '>
      
        <h1>1. Welcome to the Hour of Code!</h1>

          We're going to use Pyret to write programs that make images.  We've embedded a Pyret editor on the right-hand side of this page. 
          <p/>
          This Editor works like a chat program...
          When you write lines of code, the Editor runs each line and responds with the result. 

          <!----   <ol> = "Ordered List" (numbered list items) ---->
          <ul>
            <li>The <b>Update responses</b> button will re-run every line</li>
            <li>You can also <b>click any line</b> to edit or change it</li>
          </ul>
          <p/>
          You can also always click ðŸ”„, to reset the editor to where it was the first time you saw any card.
        </li>

        <!----   Page 2 ---->
        <li editorCode='include essentials2021'>
          <h1>2. Making Images from Code</h1>
          What do you think the following code will do?
          <p/>
          <tt>star(50, "solid", "blue")</tt>
          <p/>
          <ol>
            <li> <input type="button" value="Make a prediction, then click here" onclick='addToEditor(`
star(50, "solid", "blue")
              `, 0)' /> to add it to the editor and see the result!
            </li>
          </ol>
        </li>

        <!----   Page 3 ---->
        <li editorCode='
include essentials2021
star(50, "solid", "blue")
        '>
          <h1>3. Changing the Arguments</h1>
          You can also click on the code on the right to change it! 
           <p/>
          <ol>
            <li>Try changing the 50 to something else, and then hit "Enter" to save the change. What happens?</li>
            <p/>
            <li>Try changing the color.</li>
          </ol>
        </li>

        <!----   Page 4 ---->
        <li editorCode='
include essentials2021
star(50, "solid", "blue")
        '>
        <h1>4. Making Images</h1>
          There are lots of other functions that will produce an image... 
          <p/> some of them take the same arguments as <tt>star</tt>: 
          <p/> <i> a Number and two Strings.</i>
          <p/> Here are a few:

          <ol>
            <li>Can you make a solid, green <tt>circle</tt> with a radius of 26?</li>
            <p/>
            <li>Can you make an outlined, red <tt>triangle</tt> of size 45?</li>
            <p/>
            <li>Can you make two different purple <tt>square</tt>s with side-lengths of 104?</li>
          </ol>
        </li>

        <!----   Page 5 ---->
        <li editorCode='
include essentials2021
star(50, "solid", "blue")
        '>
          <h1>5. Making Rectangles</h1>
          There are also image-producing functions that need more arguments than <tt>star</tt>, <tt>circle</tt>, <tt>triangle</tt>, or <tt>square</tt>.
          <p/>
          <ol>
            <li>Take 1 minute to see if you can figure out how to make a <tt>rectangle</tt> before advancing to the next slide.
            </li>
          </ol>
        </li>

        <!----   Page 6 ---->
        <li editorCode='
include essentials2021 
rectangle(50, 100, "solid", "orange")
        '>
          <h1>6. What Makes Rectangles Different?</h1>
          <p/>
          <ol>
            <li>Why does <tt>rectangle</tt> need an extra number?</li>
            <p/>
            <li>What do you think will happen if you switch the order of the numbers and hit "Enter".</li>
          </ol>
          </li>

        <!----   Page 7 ---->
        <li editorCode='
include essentials2021 
rectangle(50, 100, "solid", "orange")
        '>
          <h1>7. More Images</h1>

          Let's explore some more functions that require the same arguments as <tt>rectangle</tt>: <i>two Numbers and two Strings</i>. 
          <p/>
          <ol>
            <li>Experiment with the <tt>ellipse</tt> function.</li>
            <p/>How would you explain what an ellipse is to someone else?
            <p/>Can you make an ellipse that looks like a circle?
            <p/>A wide ellipse? A tall ellipse?
            <p/>
            <li>Experiment with <tt>right-triangle</tt>.</li>
            <p/>Figure out why it needs two numbers, while <tt>triangle</tt> only needed one.
          </ol>
        </li>

        <!----   Page 8 ---->
        <li editorCode='
include essentials2021
head = circle(42, "outline", "darkgrey")
torso = circle(50, "outline", "darkgrey")
base = circle(70, "outline", "darkgrey")
        '>
          <h1>8. Defining & Composing Functions</h1>
          <ol>
            <li>What do you think will happen if you type <tt>head</tt> and hit "Enter"?  Test it out.</li>
            <li>How will that be different from typing <tt>torso</tt> or <tt>base</tt>?</li>
          <p/>
          <b>Defining functions simplifies the process of combining them.</b>
          <p/>
            <li>What do you think this next line of code will do?</li>
          <p/>  
          <tt>body = above(torso, base)</tt>
          <p/>  
           <input type="button" value="Make a prediction, then click here" onclick='addToEditor(`body = above(torso, base)`)' /> to add it to the editor and see the result!
          <p/>
            <li>YOUR TURN: Can you write the code to place the head above the body?</li>
          </ol>
        </li>

        <!----   Page 9 ---->
        <li editorCode='
include essentials2021
brim = rectangle(70, 15, "solid", "black")
        '>
          <h1>9. Composing a Top Hat</h1>

          <ol>
            <li>Define  <tt>top</tt> to be a solid black rectangle that is 50 x 30.</li>
            <p/>
            <li>Define <tt>top-hat</tt> to put the <tt>brim</tt> below the <tt>top</tt>.</li>
            <p/>
            <li>Can you make the same image using <tt>above</tt>?</li>
          </ol>
        </li>

        <!----   Page 10 ---->
        <li editorCode='
include essentials2021
eye-white = circle(30, "solid", "lightgrey")
pupil = circle(10, "solid", "black")
        '>

          <h1>10. Overlaying Images</h1>
          Just as we can place an image <tt>above</tt> or <tt>below</tt> another image, we can also <tt>overlay</tt> an image on top of another image.
          <p/>
          <ol>
            <li>What do you think this next line of code will do?</li>
              <p/>
              <tt>overlay(pupil, eye-white)</tt>
              <p/>
               <input type="button" value="Make a prediction, then click here" onclick='addToEditor(`overlay(pupil, eye-white)`)' /> to add it to the editor and see the result!
            <li>Where on the eye-white does the pupil get placed?</li>
            <li>What do you think we'd see if we typed <tt>overlay(eye-white, pupil)</tt> instead?</li>
              </p>
               <input type="button" value="Make a prediction, then click here" onclick='addToEditor(`overlay(eye-white, pupil)`)' /> to add it to the editor and see the result!
          </ol>
        </li>

        <!----   Page 11 ---->
        <li editorCode='
include essentials2021
eye-white = circle(30, "outline", "black")
pupil = circle(10, "solid", "black")
        '>
          <h1>11. Placing Images Using Coordinates</h1>

          Sometimes we want the top image to land somewhere other than on the center of the bottom image.
          <p/>
          This requires a function called <tt>put-image</tt>, which takes in two Numbers. 
          <p/>  
            <ul>
              <li>The first Number is the x-coordinate.</li>
              <li>The second Number is the y-coordinate.</li>
              <li>The bottom left corner of the bottom image is (0,0).</li>
            </ul>
           <p/>
           <ol>
             <li>What image do you think the expression <tt>put-image(pupil, 10, 30, eye-white)</tt> will generate? </li>
             <p/>
              <input type="button" value="Make a prediction, then click here" onclick='addToEditor(`put-image(pupil, 10, 30, eye-white)`)' /> to add it to the editor and test it out!
           </ol>  
        </li>

        <!----   Page 12 ---->
        <li editorCode='
include essentials2021
eye-white = circle(30, "outline", "black")
pupil = circle(10, "solid", "black")
put-image(pupil, 10, 30, eye-white)
        '>
          <h1>12. Making Googley Eyes</h1>
          <ol>
              <li>Use <tt>put-image</tt> to place the <tt>pupil</tt> on the center of the <tt>eye-white</tt>.</li>
              <p/>
              <li>Use <tt>put-image</tt> to place the <tt>pupil</tt> on the bottom of the <tt>eye-white</tt>.</li>
              <p/>
              <li>Use <tt>put-image</tt> to place the <tt>pupil</tt> on the <tt>eye-white</tt> wherever you think it makes the best looking googley eye!.</li>
            </ol> 
        </li>
      
        <!----   Page 13 
        
        IN THIS WINDOW WE WANT TO SEE THE CODE THAT THEY'VE ALREADY WRITTEN EMBEDDED IN THE DEFINITIONS AREA OF A PYRET STARTER FILE SO WE CAN TRANSITION THEM TO LOOKING AT PYRET PROGRAMS---->
        
         <li videoConfig="videos/eye.mov">
          <h1>13. Introducing The Pyret Editor</h1>
          
            So far we have been working in the chatitor version of Pyret. More complex programs get written in a different view.
              <p/>Here you see a screenshot of our classic Pyret editor.  
              <ul>
                <li>On the left side we have the Definitions Area, with all of the code that we have written so far in one place..</li>
                <li>On the right side we have the Interactions Area, where we have evaluated <tt>googley-eye</tt>.</li>
              <p/>
                <li>In Repartee, code is evaluated as you type it.</li>
                <li>In classic Pyret, code is only evaluated when you click "Run".</li>
              </ul>  
              <p/>              
            
            <input type="button" value="Click here to open Pyret in a new window" onclick="window.open('https://code.pyret.org/editor#share=1bJJzrW_XM1gQzg1oghlW98HSIsA9WWt0&v=31c9aaf', '_blank')"/>  and play around with the file pictured to get a feel for it.
        </li>

        <!----   Page 14 ---->

        <li imageConfig="images/snowmanpuzzle.png">
          <h1>14. Your Task</h1>

          Now that you know how to define image-producing functions and compose more complex images with them using coordinates, you're ready to solve a puzzle! 
          <p/>
          When you click open the file linked below and click "Run", you will see a jumbled collection of objects that need to be placed to compose a winter wonderland scene.
          <p/>
          The pieces have been defined behind the scenes so you won't be able to change them... but you don't have to use them all and, once you have successfully created an image that will make sense to other viewers, you can use what you've learned to improve upon it by defining any additional values you like!
          <p/>
         <input type="button" value="Click here to open the Winter Wonderland Puzzle" onclick="window.open('https://code.pyret.org/editor#share=1Lgax_uAdFxUJzyGKPbx2BESj9BNkTK3i&v=1904b2c', '_blank')"/>  in a new Pyret window and click "Run" to load the initial image.</a>
         </li> 

        <!----   TEMPLATE PAGE
        <li editorCode='
          ..some pyret code
        '>
          <h1>Some Header</h1>

          This is where you put instructions for kids

          <ul> 
            <li>bulleted list item 1 </li>
            <li>bulleted list item 2 </li>
          </ul>

         <div class="activity"> = "purple shaded box" 
          <div class="activity">Do a thing!</div>

          You can always <input type="button" value="reset" onclick="loadFromConfig()"/> the editor to where it was the first time you saw this card.
        </li>
 ---->
      </ul>
    </div>
    
    <div id="righthand"></div>
    <div id="footer">
      <a href="https://www.BootstrapWorld.org" style="color: white">Bootstrap</a> is brought to you by the <a href="https://www.BootstrapWorld.org/community">Bootstrap Team</a>. Special thanks to <a href="http://www.ProgramByDesign.org">Program by Design</a> and <a href="https://www.Brown.edu">Brown University</a>.
    </div>
  </body>
</html>