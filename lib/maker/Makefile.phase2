# created 2023-01-14
# last modified 2023-02-15

# all: initialization copylessons buildlessons buildpathways doconversions

include $(MAKE_DIR)utils.mk

all: dependency linkcheck images tocs books

##########################################################################

pathway-independent-adoc-files := $(wildcard \
	distribution/$(NATLANG)/textbooks/*.adoc \
	distribution/$(NATLANG)/textbooks/*/*.adoc \
	)

pathway-independent-asc-files := $(foreach adocf,$(pathway-independent-adoc-files),$(call asc-file,$(adocf)))

pathway-independent-pdf-files := $(foreach adocf,$(pathway-independent-adoc-files),$(call pdf-file,$(adocf)))

build-pathway-independent: $(pathway-independent-pdf-files)

define make-build-pathway-independent-rule
$(call asc-file,$1): $1
	@#echo build-pathway-independent: creating $$@ from $$<
	@$(MAKE_DIR)do-pathway-independent.sh $$<

endef

$(eval $(foreach adocf,$(pathway-independent-adoc-files),$(call make-build-pathway-independent-rule,$(adocf))))

define make-build-pathway-independent-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo build-pathway-independent-pdf: creating $$@ from $$<
	@if test -n "$(BOOK)"; then $(MAKE_DIR)do-pathway-independent-pdf.sh $$<; fi

endef

$(eval $(foreach adocf,$(pathway-independent-adoc-files),$(call make-build-pathway-independent-pdf-rule,$(adocf))))

###############################################################################

# relevant-lessons := $(foreach \
# 	lesson-name,$(shell \
# 	cat $(RELEVANT_LESSONS_INPUT)),distribution/$(NATLANG)/lessons/$(lesson-name))

relevant-lessons := $(wildcard distribution/$(NATLANG)/lessons/*)

# shd use recursive wildcard if we can find one

relevant-adoc-files := $(foreach \
	lesson,$(relevant-lessons),$(wildcard \
	$(lesson)/*/*.adoc \
	$(lesson)/*/*/*.adoc \
	$(lesson)/*/*/*/*.adoc \
	))

relevant-asc-files := $(foreach \
	adocf,$(relevant-adoc-files),$(call asc-file,$(adocf)))

relevant-pdf-files := $(foreach \
	adocf,$(relevant-adoc-files),$(call pdf-file,$(adocf)))

build-workbook-pages: $(relevant-pdf-files)

define make-build-workbook-page-rule
$(call asc-file,$1): $1
	@#echo building workbook-page $$@ from $$<
	@$(MAKE_DIR)do-workbook-page.sh $$<

endef

$(eval $(foreach adocf,$(relevant-adoc-files),$(call make-build-workbook-page-rule,$(adocf))))

define make-build-workbook-page-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo building workbook-page: $$@ from $$<
	@if test -n "$(BOOK)"; then $(MAKE_DIR)do-workbook-page-pdf.sh $$<; fi

endef

$(eval $(foreach adocf,$(relevant-adoc-files),$(call make-build-workbook-page-pdf-rule,$(adocf))))

#########################################################################

lesson-plan-adoc-files := $(wildcard \
	distribution/$(NATLANG)/lessons/*/index.adoc)

lesson-plan-asc-files := $(foreach \
	adocf,$(lesson-plan-adoc-files),$(call asc-file,$(adocf)))

lesson-plan-pdf-files := $(foreach \
	adocf,$(lesson-plan-adoc-files),$(call pdf-file,$(adocf)))

build-lesson-plans: $(lesson-plan-pdf-files)

define make-build-lesson-plan-rule
$(call asc-file,$1): $1
	@#echo build-lesson-plan: creating $$@ from $$<
	@$(MAKE_DIR)do-lesson-plan.sh $$<

endef

$(eval $(foreach adocf,$(lesson-plan-adoc-files),$(call make-build-lesson-plan-rule,$(adocf))))

define make-build-lesson-plan-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo build-lesson-plan-pdf: creating $$@ from $$<
	@if test -n "$(BOOK)"; then $(MAKE_DIR)do-lesson-plan-pdf.sh $$<; fi

endef

$(eval $(foreach adocf,$(lesson-plan-adoc-files),$(call make-build-lesson-plan-pdf-rule,$(adocf))))

###############################################################################

resource-adoc-files := $(wildcard \
	distribution/$(NATLANG)/courses/*/*/*.adoc \
	distribution/$(NATLANG)/courses/*/*/*/*.adoc \
	distribution/$(NATLANG)/courses/*/*/*/*/*.adoc \
	)

resource-asc-files := $(foreach \
	adocf,$(resource-adoc-files),$(call asc-file,$(adocf)))

resource-pdf-files := $(foreach \
	adocf,$(resource-adoc-files),$(call pdf-file,$(adocf)))

build-pathway-resources: $(resource-pdf-files)

define make-build-resource-rule
$(call asc-file,$1): $1
	@#echo build-resource: creating $$@ from $$<
	@$(MAKE_DIR)do-pathway-resource.sh $$<

endef

$(eval $(foreach adocf,$(resource-adoc-files),$(call make-build-resource-rule,$(adocf))))

define make-build-resource-pdf-rule
$(call pdf-file,$1): $1 $(call asc-file,$1)
	@#echo build-resource-pdf: creating $$@ from $$<
	@if test -n "$(BOOK)"; then $(MAKE_DIR)do-pathway-resource-pdf.sh $$<; fi

endef

$(eval $(foreach adocf,$(resource-adoc-files),$(call make-build-resource-pdf-rule,$(adocf))))

########################################################################

narrative-adoc-files := $(wildcard distribution/$(NATLANG)/courses/*/index.adoc)

narrative-asc-files := $(foreach \
	adocf,$(narrative-adoc-files),$(call asc-file,$(adocf)))

build-pathway-narratives: $(narrative-asc-files)

define make-build-narrative-rule
$(call asc-file,$1): $1
	@$(MAKE_DIR)do-pathway-narrative.sh $$<

endef

$(eval $(foreach adocf,$(narrative-adoc-files),$(call make-build-narrative-rule,$(adocf))))

##########################################################################

preproc: build-pathway-independent build-workbook-pages build-lesson-plans build-pathway-resources build-pathway-narratives
	@echo ")" >> $(ADOCABLES_INPUT)
	$(MAKE_DIR)run-asciidoctor.sh

primitives: preproc
	$(MAKE_DIR)collect-primitives.sh

postproc: preproc
	$(MAKE_DIR)do-postproc.lua

dependency: primitives
	if test -n "$(GRAPH)"; then $(MAKE_DIR)make-dependency-graph.sh; fi

linkcheck: preproc
	if test -n "$(LINKCHECK)"; then $(MAKE_DIR)do-link-check.sh; fi

images: preproc
	$(MAKE_DIR)make-image-list.sh

tocs: preproc
	$(MAKE_DIR)make-pathway-tocs.sh

pdfs: postproc
	if test -n "$(BOOK)"; then $(MAKE_DIR)make-pdf.sh; fi

books: pdfs
	if test -n "$(BOOK)"; then $(MAKE_DIR)make-books.sh; fi
