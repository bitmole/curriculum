# created 2023-01-14
# last modified 2023-02-06

# all: initialization copylessons buildlessons buildpathways doconversions

include $(MAKE_DIR)utils.mk

all: dependency linkcheck images tocs books

# all: books

# all: preproc

##########################################################################

pathway-independent-adoc-files := $(wildcard \
	$(TOPDIR)/distribution/$(NATLANG)/textbooks/*.adoc \
	$(TOPDIR)/distribution/$(NATLANG)/textbooks/*/*.adoc \
	)

pathway-independent-asc-files := $(foreach adocf,$(pathway-independent-adoc-files),$(call asc-file,$(adocf)))

# debug-build-pathway-independent:
# 	@echo pwadocf is $(pathway-independent-adoc-files)
# 	@echo pwascf is $(pathway-independent-asc-files)

build-pathway-independent: $(pathway-independent-asc-files)

define make-build-pathway-independent-rule
$(call asc-file,$1): $1
	@# @echo build-pathway-independent: creating $$@ from $$<
	@$(MAKE_DIR)do-pathway-independent.sh $$<

endef

$(eval $(foreach adocf,$(pathway-independent-adoc-files),$(call make-build-pathway-independent-rule,$(adocf))))

###############################################################################

# debug-build-workbook-pages:
# 	@echo rl is $(relevant-lessons)
# 	@echo radocf is $(relevant-adoc-files)
# 	@echo rascf is $(relevant-asc-files)

relevant-lessons := $(foreach \
	lesson-name,$(shell \
	cat $(RELEVANT_LESSONS_INPUT)),distribution/$(NATLANG)/lessons/$(lesson-name))

# shd use recursive wildcard if we can find one

relevant-adoc-files := $(foreach \
	lesson,$(relevant-lessons),$(wildcard \
	$(lesson)/*/*.adoc \
	$(lesson)/*/*/*.adoc \
	$(lesson)/*/*/*/*.adoc \
	))

relevant-asc-files := $(foreach \
	adocf,$(relevant-adoc-files),$(call asc-file,$(adocf)))

build-workbook-pages: $(relevant-asc-files)

define make-build-workbook-page-rule
$(call asc-file,$1): $1
	@$(MAKE_DIR)do-workbook-page.sh $$<

endef

$(eval $(foreach adocf,$(relevant-adoc-files),$(call make-build-workbook-page-rule,$(adocf))))

#########################################################################

lesson-plan-adoc-files := $(foreach \
	lesson,$(relevant-lessons),$(lesson)/index.adoc)

lesson-plan-asc-files := $(foreach \
	adocf,$(lesson-plan-adoc-files),$(call asc-file,$(adocf)))

# build-lesson-plans:
# 	@echo lpadocf is $(lesson-plan-adoc-files)
# 	@echo lpascf is $(lesson-plan-asc-files)

build-lesson-plans: $(lesson-plan-asc-files)

define make-build-lesson-plan-rule
$(call asc-file,$1): $1
	@$(MAKE_DIR)do-lesson-plan.sh $$<

endef

$(eval $(foreach adocf,$(lesson-plan-adoc-files),$(call make-build-lesson-plan-rule,$(adocf))))

###############################################################################

resource-adoc-files := $(wildcard \
	distribution/$(NATLANG)/courses/*/*/*.adoc \
	distribution/$(NATLANG)/courses/*/*/*/*.adoc \
	distribution/$(NATLANG)/courses/*/*/*/*/*.adoc \
	)

resource-asc-files := $(foreach \
	adocf,$(resource-adoc-files),$(call asc-file,$(adocf)))

# build-pathway-resources:
# 	@echo radocf is $(resource-adoc-files)
# 	@echo rascf is $(resource-asc-files)

build-pathway-resources: $(resource-asc-files)

define make-build-resource-rule
$(call asc-file,$1): $1
	@$(MAKE_DIR)do-pathway-resource.sh $$<

endef

$(eval $(foreach adocf,$(resource-adoc-files),$(call make-build-resource-rule,$(adocf))))

########################################################################

narrative-adoc-files := $(wildcard distribution/$(NATLANG)/courses/*/index.adoc)

narrative-asc-files := $(foreach \
	adocf,$(narrative-adoc-files),$(call asc-file,$(adocf)))

build-pathway-narratives: $(narrative-asc-files)

define make-build-narrative-rule
$(call asc-file,$1): $1
	@$(MAKE_DIR)do-pathway-narrative.sh $$<

endef

$(eval $(foreach adocf,$(narrative-adoc-files),$(call make-build-narrative-rule,$(adocf))))

##########################################################################

# do-conversions: build-pathway-independent build-workbook-pages build-lesson-plans build-pathway-resources build-pathway-narratives
# 	@echo ")" >> $(ADOCABLES_INPUT)
# 	@$(MAKE_DIR)run-asciidoctor.sh
# 	@$(MAKE_DIR)do-postproc.sh
# 	@$(MAKE_DIR)collect-primitives.sh
# 	@$(MAKE_DIR)make-dependency-graph.sh
# 	@$(MAKE_DIR)make-image-list.sh
# 	@$(MAKE_DIR)make-pathway-tocs.sh
# 	@$(MAKE_DIR)make-bilingual-glossary.sh
# 	@$(MAKE_DIR)make-pdf.sh
# 	@$(MAKE_DIR)make-books.sh

preproc: build-pathway-independent build-workbook-pages build-lesson-plans build-pathway-resources build-pathway-narratives
	@echo ")" >> $(ADOCABLES_INPUT)
	@$(MAKE_DIR)run-asciidoctor.sh

primitives: preproc
	@$(MAKE_DIR)collect-primitives.sh

postproc: preproc
	@$(MAKE_DIR)do-postproc.sh

dependency: primitives
	@$(MAKE_DIR)make-dependency-graph.sh

linkcheck: preproc
	@$(MAKE_DIR)do-link-check.sh

images: preproc
	@$(MAKE_DIR)make-image-list.sh

tocs: preproc
	@$(MAKE_DIR)make-pathway-tocs.sh

pdfs: postproc 
	@$(MAKE_DIR)make-pdf.sh

books: pdfs
	@$(MAKE_DIR)make-books.sh
