# build-pathway
# build script for curriculum
# Type build-pathway --help for help.

export DEBUG=
export FORCE=
export LANGUAGE=en-us
export LINT=
export NOPDF=
export PROGLANG=
export TOPDIR=$(pwd)

ARGS=
HELP=
LASTMOD=2020-03-31 # last modified
PDFMARGIN=0mm
SED=sed
TMPHTML=tmp0.html
VERSION=

while test $# -ne 0; do
  arg=$1; shift
  if test "$arg" = --debug -o "$arg" = -d; then
    DEBUG=1
  elif test "$arg" = --force -o "$arg" = -f; then
    FORCE=1
  elif test "$arg" = -fd -o "$arg" = -df; then
    DEBUG=1; FORCE=1
  elif test "$arg" = --help -o "$arg" = -h; then
    HELP=1
  elif test "$arg" = --language; then
    LANGUAGE=$1; shift
  elif test "$arg" = --nopdf; then
    NOPDF=1
  elif test "$arg" = --proglang; then
    PROGLANG=$1; echo PROGLANG is $PROGLANG; shift
  elif test "$arg" = --lint -o "$arg" = --verify-links; then
    LINT=1
  elif test "$arg" = --version -o "$arg" = -v; then
    VERSION=1;
  else
    arg1=${arg#--}
    if test "$arg1" != "$arg"; then
      echo Mistyped option \'$arg\'?
    fi
    ARGS="$ARGS $arg"
  fi
done

function displayhelp() {
  echo Usage: build-pathway [--language L] [--proglang P] [--debug] [--force] [--nopdf] [--lint] [--help] [--version] pathway ...
  echo
  echo Builds a document tree for the given pathway argument\(s\)
  echo under the \'distribution\' directory. If no pathway arg supplied,
  echo builds for all pathways in the \'pathways\' directory.
  echo
  echo Options:
  echo "  " --language L: Build doctree for natural language L. Default: en-us
  echo "  " --proglang P: Build doctree for programming language P.
  echo "                " P is one of wescheme, pyret.
  echo "                " An appropriate default is used depending on the pathway.
  echo "  " --debug: Keep around for inspection/debugging various temp files
  echo "           " in the \'distribution\' directory.
  echo "  " --force: Regenerate doctree from scratch without relying on previous runs.
  echo "  " --nopdf: Don\'t generate PDF files. This is to speed things up
  echo "           " during debugging when PDF output isn\'t necessary.
  echo "  " --lint: \(1\) Ensure the summary tables in lesson plans have the required rows.
  echo "          " \(2\) Verify all the links used in the doctree.
  echo "          " in the pathway doctree\'s top directory.
  echo "  " --help: Display this help and exit.
  echo "  " --version: Display build-way version and exit.
  echo
  echo Order of arguments/options doesn\'t matter.
  exit
}

if test $HELP; then displayhelp; fi

if test $VERSION; then
  echo build-pathway version $LASTMOD
  exit
fi

if which gsed | grep -q .; then
  SED=gsed
fi

if ! which curl | grep -q .; then
  echo WARNING: Missing \'curl\' tool; can\'t do --lint
  LINT=
fi

if test "$ARGS" = ""; then
  ARGS="pathways/*"
fi

if test README.html -ot README.adoc; then
  asciidoctor -a linkcss README.adoc
fi

echo '== Generated Documentation' > index.adoc
echo >> index.adoc
echo link:README.html[Authoring Guide] >> index.adoc
echo >> index.adoc
echo https://github.com/bootstrapworld/curriculum[\`curriculum\` Repo] >> index.adoc

mkdir -p distribution

cd distribution

echo '== Generated Documentation' > index.adoc

cd $TOPDIR

mkdir -p prog

PROGDIR=$TOPDIR/prog

cp -p $TOPDIR/lib/* $TOPDIR/lib/.hta* $PROGDIR

# if $LANGUAGE != en-us, and
# shared/langs/$LANGUAGE isn't sufficiently populated,
# we'll put in the en-us files first and shadow them later
#
cp -p $TOPDIR/shared/langs/en-us/* $PROGDIR

if test $LANGUAGE != en-us -a -d $TOPDIR/shared/langs/$LANGUAGE; then
  cp -p $TOPDIR/shared/langs/$LANGUAGE/* $PROGDIR
fi

#cp -p $TOPDIR/lib/.htp* distribution

function insertbodyid() {
  local f=$1
  $SED -i \
    -e 's/<body[^>]*>/\0\n<div id="body">/' \
    -e 's/<\/body>/<\/div>\n\0/' \
    $f
}

function insertstylecss() {
  local f=$1
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="\/styles.css">/' \
    $f
}

function insertnarrativecss() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|$SED -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/narrative.css" \/>/' \
    $f
}

function insertprintcss() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|$SED -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/wkhtmltopdf.css" \/>/' \
    $f
}

function insertprintcss_browser() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|$SED -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/browser-wkhtmltopdf.css" \/>/' \
    $f
}

function insertwbpagecss() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|$SED -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/wbpage.css" \/>/' \
    $f
}

function insertwbpagecss_browser() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|$SED -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/browser-wbpage.css" \/>/' \
    $f
}

function removelogos() {
  local f=$1
  $SED -i \
    -e '/^<h2 .*<img src="bootstraplogo.png"/d' \
    $f
}

function moveheaderlogopos() {
  local f=$1
  $SED -ne '/^<h1>.*class="bootstraplogo".*<\/h1>$/p' $f > temp.txt
  $SED -i \
    -e 's/^<h1>\(.*\)\(<span class="bootstrapheader".*\)$/\1<h1>\2/' \
    temp.txt
  $SED -i \
    -e '/^<h1>.*class="bootstraplogo".*<\/h1>$/d' \
    -e '/^<div id="content">/r temp.txt' \
    $f
  rm temp.txt
}

function cleanuptitle() {
  local f=$1
  $SED -i \
    -e '/^<title>/ s/<\/*span[^>]*>//g' \
    $f
}

function cleanupduration() {
  local f=$1
  $SED -i \
    -e '/^<h2 id/ s/\(begin\|end\)curriculumspan/_/g' \
    -e '/^<h2 id/ s/curriculumspan_class//g' \
    $f
}

function lintlesson() {
  local f=$1

  test $LINT || return

  for g in Prerequisites 'Relevant Standards' 'Lesson Goals' Materials Preparation 'Supplemental Resources'; do
    if ! grep -q "^<p>$g</p>$" $f; then
      echo WARNING: Lesson $LESSONPLAN missing summary-table row for \"$g\"
    fi
  done
}

function addanalytics() {
  local f=$1
  cp $PROGDIR/analytics.txt .
  $SED -i \
    -e '/^<body/r analytics.txt' \
    $f
}

function resolveabbrevs() {
  local f=$1
  local mathjaxneeded=
  local codemirrorneeded=
  if grep -q %CURRICULUMSCRIPT $f; then
    mathjaxneeded=1
  fi
  CODELANG=pyret
  if test "$PROGLANG" = wescheme; then
    CODELANG=racket
  fi
  $SED -i \
    -e 's/<pre>/<pre><span class="thinnegspace"><\/span><tt class="'$CODELANG'">/g' \
    -e 's/<\/pre>/<\/tt><\/pre>/g' \
    -e 's/<code>/<code><tt class="'$CODELANG'">/g' \
    -e 's/<\/code>/<\/tt><\/code>/g' \
    $f
  if grep -q 'class=\"\(pyret\|racket\)\"' $f; then
    codemirrorneeded=1
  fi
  $SED -i \
    -e 's/%PYRETKEYWORD%\([^%]*\)%END%/<span class=pyretkeyword>\1<\/span>/g' \
    \
    -e 's/%CURRICULUMCOMMA%/,/g' \
    \
    -e 's/<p>\(%CURRICULUMCOMMENT%\)/\1/' \
    -e 's/\(%ENDCURRICULUMCOMMENT%\)<.p>/\1/' \
    -e 's/%CURRICULUMCOMMENT%/<!-- /' \
    -e 's/%ENDCURRICULUMCOMMENT%/\n-->/' \
    \
    -e 's/%CURRICULUMSCRIPT%/<script type="math\/tex"/g' \
    -e 's/%BEGINCURRICULUMSCRIPT%/>/g' \
    -e 's/%ENDCURRICULUMSCRIPT%/<\/script>/g' \
    \
    -e 's/%CURRICULUM\([^%]*\)%/<\1/g' \
    -e 's/%BEGINCURRICULUM\([^%]*\)%/>/g' \
    -e 's/%ENDCURRICULUM\([^%]*\)%/<\/\1>/g' \
    \
    -e 's/&#8656;/\&lt;=/g' \
    -e 's/&#8594;/-\&gt;/g' \
    \
    -e 's/^\(<div id="preamble\)">/\1_disabled">/' \
    $f
  if test "$mathjaxneeded"; then
    cat > mathjax.txt <<EOF
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML%2Chttp%3A%2F%2Fwww.cs.wpi.edu%2F%7Ekfisler%2Fmathjaxlocal.js"></script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/%INSERTMATHJAX\0/' \
      -e '/%INSERTMATHJAX/r mathjax.txt' \
      -e 's/%INSERTMATHJAX//' \
      $f
  fi
  if test "$codemirrorneeded"; then
    #FIXME: is codemirror.css needed?
    cat > codemirror.txt <<EOF
    <link rel="stylesheet" href="${PATHWAYROOTDIR}lib/pretty-printing.css" />
    <link rel="stylesheet" href="${PATHWAYROOTDIR}lib/codemirror.css" />
    <script type="text/javascript" src="${PATHWAYROOTDIR}lib/codemirror.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}lib/runmode.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}lib/scheme2.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}lib/pyret-mode.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}lib/bootstraplesson.js"></script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/%INSERTCODEMIRROR\0/' \
      -e '/%INSERTCODEMIRROR/r codemirror.txt' \
      -e 's/%INSERTCODEMIRROR//' \
      $f
  fi
  tif=${f%.*}-comment.txt
  if test -f $tif; then
    $SED -i \
      -e '/^<body[^>]*>/s/<body[^>]*>/\0%INSERTCURRICULUMCOMMENT/' \
      -e '/%INSERTCURRICULUMCOMMENT/r '$tif \
      -e 's/%INSERTCURRICULUMCOMMENT//' \
      $f
  fi
}

function adjustproglangsubdirs() {
  #echo doing adjustproglangsubdirs $d
  local d=$1

  test -d "$d" || return

  if test -d "$d"/$PROGLANG; then
    cp -p "$d"/$PROGLANG/* "$d"
  fi

  for lang in pyret wescheme; do
    if test -d "$d"/$lang; then
      rm -fr "$d"/$lang
    fi
  done

  for subdir in "$d"/*; do
    if test -d "$subdir"; then
      adjustproglangsubdirs "$subdir"
    fi
  done
  #echo done adjustproglangsubdirs $d
}

function shadowcopydir() {
  local srcdir=$1
  local targetdir=$2
  #echo doing shadowcopydir $srcdir $targetdir
  mkdir -p "$targetdir"

  for f in "$srcdir"/*; do
    #echo f = $f
    if test -f "$f"; then
      cp -p "$f" "$targetdir"
    elif test -d "$f"; then
      g=$(basename "$f")
      shadowcopydir "$f" "$targetdir"/"$g"
    fi
  done
  #echo $targetdir has...
  #ls "$targetdir"
}

function checkifsinglepdfpage() {
  local fpdf="$1"

  NUMPAGES=$(pdftk $fpdf dump_data|grep NumberOfPages|$SED -e 's/NumberOfPages:  *\([0-9][0-9]*\).*/\1/')

  test "$NUMPAGES" = 1 || echo WARNING: $fpdf has $NUMPAGES pages
}

function checkeachinternallink() {
  local f="$1"

  if ! test -f "$f"; then
    export BROKEN_INTERNAL_LINKS=1
    echo WARNING: Invalid internal link $f
  fi
}

function checkeachexternallink() {
  local f="$1"
  #echo checkeachlink $f

  local invalid=

  # possible alternative? wget -q --spider $f
  curl -Is $f > .temp.txt

  if test ! -s .temp.txt; then
    invalid=1
  elif ! cat .temp.txt|head -n 1|grep -q 302; then
    :
  elif cat .temp.txt|head -n 1|grep -q 200; then
    if cat .temp.txt|grep -q '^Connection: close'; then
      invalid=1
    fi
  fi

  rm .temp.txt

  if test $invalid; then
    export BROKEN_EXTERNAL_LINKS=1
    echo WARNING: Invalid external link $f
  fi

}

function checklinks() {
  #echo checklinks $1
  test "$LINT" || return

  local g="$1"
  local f=${g%.*}.external-links.txt.kp

  if test -s "$f"; then
    for h in $(cat "$f"); do
      checkeachexternallink "$h"
    done
  fi

  f=${g%.*}.internal-links.txt.kp

  if test -s "$f"; then
    for h in $(cat "$f"); do
      checkeachinternallink "$h"
    done
  fi
}

function recursiveadoc() {
  local dir="$1"
  local oldPATHWAYROOTDIR="$2"
  local oldLESSONSUBDIR="$3"
  local oldSOLUTION="$SOLUTION"
  local oldOTHERDIR="$OTHERDIR"

  #echo recursiveadoc of $dir

  export PATHWAYROOTDIR="$oldPATHWAYROOTDIR../"
  export LESSONSUBDIR="$oldLESSONSUBDIR/$dir"

  if test "$dir" = solution-pages; then export SOLUTION=1; fi

  cd "$dir"

  for d in *; do
    if test -d "$d"; then
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
    fi
  done

  export OTHERDIR=1
  if test "$dir" = pages -o "$dir" = solution-pages \
    -o "$dir" = front-matter -o "$dir" = back-matter; then
      export OTHERDIR=
  fi

  if test $LINT; then
    if test ! $OTHERDIR; then
      if test -f workbook-pages.txt.kp; then
        for wbp in $(cat workbook-pages.txt.kp); do
          if test ! -f $wbp; then
            BROKEN_WORKBOOK_PAGES=1
            echo WARNING: Missing workbook page $wbp in $LESSON/$dir
          fi
        done
      fi
    fi
  fi

  for f in *.adoc; do
    if test ! -f "$f"; then
      if test "$dir" = "pages"; then
        echo No adoc files in $L/$LESSONSUBDIR
      fi
    elif echo $f|grep -q ' '; then
      echo Discarding file \'$f\' with space in its name
      rm "$f"
    else
      fhtml=${f%.adoc}.html
      fasc=${f%.adoc}.asc
      DOIT=
      if test $OTHERDIR; then
        if test $f -nt $fasc; then DOIT=1; fi
      else
        if test $f -nt $fhtml; then DOIT=1; fi
      fi
      if test $DOIT; then
        echo building $PATHWAY/\*\*/$L/$LESSONSUBDIR/$f
        $PROGDIR/adoc-preproc.rkt $f
        #test -f "$fhtml" || echo $fhtml not created
        if test -f "$fhtml"; then
          resolveabbrevs $fhtml
          insertprintcss_browser $fhtml
          insertwbpagecss_browser $fhtml
          if test ! $NOPDF; then
            fpdf=${fhtml%.html}.pdf
            if test $fhtml -nt $fpdf; then
              cp -p $fhtml $TMPHTML
              insertprintcss $TMPHTML
              insertwbpagecss $TMPHTML
              ASPECT=
              if head -5 $f|grep -q '^ *\[\.landscape\] *$'; then
                ASPECT="-O Landscape --margin-top $PDFMARGIN"
              fi
              wkhtmltopdf --margin-bottom $PDFMARGIN --margin-left $PDFMARGIN --margin-right $PDFMARGIN $ASPECT --lowquality -q $TMPHTML $fpdf
              checkifsinglepdfpage "$fpdf"
              test $DEBUG || rm $TMPHTML
            fi
          fi
        fi
      fi
      checklinks $f
    fi
  done

  cd ..
  export PATHWAYROOTDIR="$oldPATHWAYROOTDIR"
  export LESSONSUBDIR="$oldLESSONSUBDIR"
  export SOLUTION="$oldSOLUTION"
  export OTHERDIR="$oldOTHERDIR"
}

function mkdirsolutionversionof() {
  local d="$1"

  test -d "$d" || return

  if test -d solution-$d-2; then
    echo deadc0de: solution-$d-2 shouldnt exist
    rm -fr solution-$d-2
  fi
  cp -pr $d solution-$d-2
  cp -p $PROGDIR/.hta* solution-$d-2

  if test -d solution-$d; then
    shadowcopydir solution-$d solution-$d-2
    rm -fr solution-$d
  fi
  mv solution-$d-2 solution-$d
}

function buildworkbookpages() {
  local L=$1
  #echo
  #echo building $L pages
  cd $L
  #
  if test ! -d pages; then
    echo WARNING: $L missing pages
    mkdir pages
  fi
  adjustproglangsubdirs pages

  mkdirsolutionversionof pages
  adjustproglangsubdirs solution-pages

  #
  export PATHWAYROOTDIR="../../"
  export LESSONSUBDIR="."
  export SOLUTION=

  for d in *; do
    if test -d "$d"; then
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
    fi
  done

  cd ..
}

function collapseadjtables() {
  local f=$1
  local x=$(grep -n '^<\/*tbody>' "$f"|$SED -e 's/^\([^:]*\):.*/\1/'|$SED -ne '2,3p')
  if test -z "$x"; then
    return
  fi
  local xi=$(echo $x|$SED -e 's/^\([^ ]*\) .*/\1/')
  local xii=$(echo $x|$SED -e 's/^[^ ]* \([^ ]*\).*/\1/')
  if test -z "$xi" -o -z "$xii"; then
    return
  fi
  $SED -i -e "$xi,${xii}d" "$f"
}

function buildlessonplan() {
  #echo doing buildlessonplan
  local L=$1
  #echo
  #echo building $PATHWAY "->" $L lesson plan
  cd $L
  local copacetic=1
  for f in *.adoc; do
    if test ! -f $f; then
      copacetic=
    fi
  done
  if ! test "$copacetic"; then
    echo WARNING: No lesson plan in lesson $L
  elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo WARNING: Too many lesson plans in lesson $L
  else
    #cp -p $PROGDIR/*.css .
    export PATHWAYROOTDIR="../../"
    # there should be only one?
    #echo building lesson plan from *.adoc
    for f in *.adoc; do
      cp -p $f index.asciidoc
    done
    if test index.asciidoc -nt index.html; then
      echo building lesson plan: $PATHWAY "→" $L "→" *.adoc
      $PROGDIR/adoc-preproc.rkt index.asciidoc
      #test -f index.html || echo index.html not made!
      #makeglossaryandstandards
      #collapseadjtables index.html
      #collapseadjtables index.html # do it twice!
      addanalytics index.html
      resolveabbrevs index.html
      moveheaderlogopos index.html
      insertnarrativecss index.html
      insertprintcss_browser index.html
      cleanuptitle index.html
      cleanupduration index.html
      lintlesson index.html
    else
      if test -f pathway-missing-glossary-items.rkt.kp; then
        $PROGDIR/glossary-warnings.rkt
      fi
    fi
    checklinks index.html
    if test ""; then
      if test ! $NOPDF; then
        #echo Creating lesson plan pdf
        if test index.html -nt index.pdf; then
          cp index.html $TMPHTML
          insertprintcss $TMPHTML
          wkhtmltopdf --lowquality -q $TMPHTML index.pdf
          if test ! $DEBUG; then
            rm $TMPHTML
          fi
        fi
      fi
    fi
  fi
  cd ..
}

function buildlessons() {
  #echo doing buildlessons
  cd lessons
  if test ! -f lessons.txt; then
    echo WARNING: No lessons in pathway $PATHWAY
  else
    for L in $(cat lessons.txt); do
      export LESSON=lessons/$L
      buildworkbookpages $L
      export LESSON=
    done
    export L=
  fi
  cd ..
}

function buildlessonplans() {
  echo buildlessonplans in $(pwd)
  cd lessons
  if test ! -f lessons.txt; then
    echo WARNING: No lessons in pathway $PATHWAY
  else
    for L in $(cat lessons.txt); do
      # needed?
      export LESSON=lessons/$L
      export LESSONPLAN=$L
      buildlessonplan $L
      export LESSONPLAN=
      export LESSON=
    done
    export L=
  fi
  cd ..
}

function makeglossaryandstandards() {
  if test -f pathway-glossary.asc; then
    asciidoctor -a linkcss -a proglang=$PROGLANG -a pathway=$SRCPATHWAY \
      -a stylesheet=${PATHWAYROOTDIR}curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -a title='Glossary' \
      -o pathway-glossary.shtml \
      pathway-glossary.asc
          insertbodyid pathway-glossary.shtml
          insertstylecss pathway-glossary.shtml
          resolveabbrevs pathway-glossary.shtml
  fi
  if test -f pathway-standards.asc; then
    asciidoctor -a linkcss -a proglang=$PROGLANG -a pathway=$SRCPATHWAY \
      -a stylesheet=${PATHWAYROOTDIR}curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -a title='Standards' \
      -o pathway-standards.shtml \
      pathway-standards.asc
          insertbodyid pathway-standards.shtml
          insertstylecss pathway-standards.shtml
          resolveabbrevs pathway-standards.shtml
  fi
}

function buildpathwaynarrative() {
  local copacetic=1
  for f in *.adoc; do
    if test ! -f $f; then copacetic=
    fi
  done
  if test ! "$copacetic"; then
    echo WARNING: No narrative in pathway $PATHWAY\; creating one
    echo "= $PATHWAY" > index.adoc
  fi
  if ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo WARNING: Too many narratives in pathway $PATHWAY
  else
    #cp -p $PROGDIR/*.css .
    export PATHWAYROOTDIR=""
    # there should be only one?
    #echo
    for f in *.adoc; do
      cp -p $f index.asciidoc
    done
    if test index.asciidoc -nt index.shtml; then
      echo building pathway narrative: $PATHWAY "→" *.adoc
      export NARRATIVE=1
      $PROGDIR/adoc-preproc.rkt index.asciidoc
      export NARRATIVE=
      makeglossaryandstandards
      if test -f pathway-lessons.asciidoc; then
        if test pathway-lessons.asciidoc -nt pathway-lessons.html; then
          $PROGDIR/adoc-preproc.rkt pathway-lessons.asciidoc
          removelogos pathway-lessons.html
          resolveabbrevs pathway-lessons.html
        fi
      fi
      mv index.html index.shtml
      insertbodyid index.shtml
      addanalytics index.shtml
      insertstylecss index.shtml
      resolveabbrevs index.shtml
      #moveheaderlogopos index.shtml
      insertnarrativecss index.shtml
      #cleanuptitle index.shtml
    fi

    checklinks index.html
    #verifylinks

  fi
}

function buildpathway() {
  cd $TOPDIR

  PATHWAY=$SRCPATHWAY

  export PATHWAYROOTDIR=./
  export LESSONSUBDIR=
  export SOLUTION=
  export BROKEN_WORKBOOK_PAGES=
  export BROKEN_INTERNAL_LINKS=
  export BROKEN_EXTERNAL_LINKS=

  # special-casing only algebra and game-pathway,
  # as they're the only pathways that allow two prog langs
  if test "$SRCPATHWAY" = game-pathway -o \
          "$SRCPATHWAY" = algebra; then
    PATHWAY=$SRCPATHWAY-$PROGLANG
  elif test "$PROGLANG" = wescheme; then
    PATHWAY=$SRCPATHWAY-wescheme
  fi

  langicon=🕱

  if test "$PROGLANG" = wescheme; then
    langicon=🥾
  fi

  echo

  if test ! -d pathways/$SRCPATHWAY/langs/$LANGUAGE; then
    echo WARNING: No pathway $PATHWAY/$LANGUAGE
  else
    echo building pathway: $PATHWAY/$LANGUAGE $langicon
    mkdir -p distribution/$PATHWAY

    if test $FORCE; then
      rm -fr distribution/$PATHWAY/$LANGUAGE
      cp -pr pathways/$SRCPATHWAY/langs/$LANGUAGE distribution/$PATHWAY/$LANGUAGE
    else
      mkdir -p distribution/$PATHWAY/$LANGUAGE
      cp -pr pathways/$SRCPATHWAY/langs/$LANGUAGE/* distribution/$PATHWAY/$LANGUAGE
    fi

    mkdir -p distribution/$PATHWAY/$LANGUAGE/lib
    cp -p $PROGDIR/*.png $PROGDIR/*.css $PROGDIR/*.js distribution/$PATHWAY/$LANGUAGE/lib

    cd distribution/$PATHWAY/$LANGUAGE

    # XXX probably not needed?
    if test -f lessons-and-standards.rkt; then
      cp -p lessons-and-standards.rkt $PROGDIR
    fi

    mkdir -p lessons workbook
    mkdir -p resources/protected
    cp -p $PROGDIR/.hta* resources/protected

    if test ! -f lesson-order.rkt; then
      echo WARNING: No lesson-order.rkt in pathway $PATHWAY/$LANGUAGE
    else
      #echo copying lessons...
      $PROGDIR/copy-lessons.rkt
    fi

    buildlessons
    #echo

    for d in front-matter back-matter; do
      cd $d
      mkdirsolutionversionof pages
      cd ..
      adjustproglangsubdirs $d
    done

    export PATHWAYROOTDIR=

    #echo PWYD is $PATHWAYROOTDIR
    #echo LSDR is $LESSONSUBDIR
    #echo SOLN is $SOLUTION

    for d in front-matter back-matter; do
      test -d "$d" || break
      recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
    done

    cd resources

    export PATHWAYROOTDIR=../

    for d in *; do
      if test -d "$d"; then
        adjustproglangsubdirs "$d" # XXX maybe in a separate loop so potential xrefs work
        #echo making pathways lessons
        #export SOLUTION=
        #echo L is $L
        #echo PATHWAYROOTDIR is $PATHWAYROOTDIR
        #echo LESSONSUBDIR is $LESSONSUBDIR
        #echo SOLUTION is $SOLUTION

        recursiveadoc "$d" "$PATHWAYROOTDIR" "$LESSONSUBDIR"
      fi
    done

    #cp -p $PROGDIR/*.css $PROGDIR/.hta* .
    cp -p $PROGDIR/.hta* .
    local copacetic=1
    for f in *.adoc; do
      if test ! -f $f; then copacetic=
      fi
    done
    if test ! "$copacetic"; then
      echo WARNING: No teacher resource files in pathway $PATHWAY
    elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
      echo WARNING: Too many teacher resource files in pathway $PATHWAY
    else
      #export PATHWAYROOTDIR="../"
      # there should be only one?
      for f in *.adoc; do
        cp -p $f index.asciidoc
      done
      if test index.asciidoc -nt index.html; then
        echo building teacher resources: $PATHWAY "→" "resources" "→" *.adoc
        export TEACHER_RESOURCES=1
        $PROGDIR/adoc-preproc.rkt index.asciidoc
        export TEACHER_RESOURCES=
        resolveabbrevs index.html
        moveheaderlogopos index.html
        cleanuptitle index.html
      fi
      checklinks index.html
    fi
    cd ..

    if test ! -f workbook-page-index.rkt; then
      echo WARNING: No workbook index file in pathway $PATHWAY/$LANGUAGE
    else
      export PATHWAYROOTDIR=""
      #cp -p $PROGDIR/front-cover-teacher.pdf .
      #echo
      #echo building pathway workbooks: $PATHWAY
      #echo calling make-workbook.rkt
      if test $DEBUG; then
        $PROGDIR/make-workbook.rkt
      else
        $PROGDIR/make-workbook.rkt >/dev/null 2>&1
      fi
      rm -f workbook-numbered.*
    fi

    buildlessonplans

    buildpathwaynarrative

  fi

  cd $TOPDIR

  if test $LINT; then

    if test $BROKEN_WORKBOOK_PAGES; then
      echo 👎 Broken workbook pages in $PATHWAY
    else
      echo 👍 No broken workbook pages in $PATHWAY
    fi

    if test $BROKEN_INTERNAL_LINKS; then
      echo 👎 Broken internal links in $PATHWAY
    else
      echo 👍 No broken internal links in $PATHWAY
    fi

    if test $BROKEN_EXTERNAL_LINKS; then
      echo 👎 Broken external links in $PATHWAY
    else
      echo 👍 No broken external links in $PATHWAY
    fi
  fi

}

for f in $ARGS; do
  export SRCPATHWAY=$f
  export SRCPATHWAY=${SRCPATHWAY#pathways/}
  export SRCPATHWAY=${SRCPATHWAY%/}
  if test "$PROGLANG" = ""; then
    if test "$SRCPATHWAY" = game-pathway -o \
            "$SRCPATHWAY" = algebra; then
      export PROGLANG=wescheme; buildpathway
      export PROGLANG=pyret; buildpathway
    else
      export PROGLANG=pyret; buildpathway
    fi
    export PROGLANG=
  else
    buildpathway
  fi
done

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in distribution/*/*; do
  f=${f%/}
  g=${f#distribution/}
  pwy=${g%/*}
  lang=${g#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:$docf[$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor -a linkcss index.adoc

cd distribution

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in */*; do
  f=${f%/}
  pwy=${f%/*}
  lang=${f#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:$docf[$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor -a linkcss index.adoc

if test ! $DEBUG; then
  rm -fr $PROGDIR
  for f in adoc asciidoc rkt tex title txt; do
    find . -name \*.$f -delete
  done
fi
