#

export LANGUAGE=en-us
export PROGLANG=
export DEBUG=false
export NOPDF=false
export VERIFYLINKS=false
export HELP=false
export VERSION=false
export LASTMOD=2019-11-15 # last modified

# set $BOOTSTRAP_CURRICULUM_BUILD_DEBUG to avoid typing --debug every time
if test "$BOOTSTRAP_CURRICULUM_BUILD_DEBUG"; then
  DEBUG=true
fi

ARGS=
while test $# -ne 0; do
  arg=$1; shift
  if test "$arg" = --help; then
    HELP=true;
  elif test "$arg" = --version; then
    VERSION=true;
  elif test "$arg" = --language; then
    LANGUAGE=$1; shift
  elif test "$arg" = --proglang; then
    PROGLANG=$1; shift
  elif test "$arg" = --debug; then
    DEBUG=true;
  elif test "$arg" = --nopdf; then
    NOPDF=true;
  elif test "$arg" = --verify-links; then
    if which linkchecker | grep -q .; then
      VERIFYLINKS=true;
    fi
  else
    ARGS="$ARGS $arg"
  fi
done

if $HELP; then
  echo Usage: build-pathway [--language L] [--proglang P] [--debug] [--nopdf] [--help] pathway ...
  echo
  echo Builds a document tree for the given pathway argument\(s\)
  echo under the \'distribution\' directory. If no pathway arg supplied,
  echo builds for all pathways in the \'pathways\' directory.
  echo
  echo Options:
  echo "  " --help: Display this help and exit.
  echo "  " --language L: Build doctree for natural language L. Default: en-us
  echo "  " --proglang P: Build doctree for programming language P.
  echo "             " P is one of wescheme, pyret.
  echo "             " An appropriate default is used depending on the pathway.
  echo "  " --debug: Keep around for inspection/debugging various temp files
  echo "           " in the 'distribution' directory.
  echo "  " --nopdf: Don\'t generate PDF files. This is to speed things up
  echo "           " during debugging when PDF output isn\'t necessary.
  echo "  " --verify-links: Verify all the links used in the doctree. A copy of
  echo "                  " the report is also stored in invalid-links.html
  echo "                  " in the pathway doctree\'s top directory.
  echo "  " --version: Display build-way version and exit.
  echo
  echo Order of arguments/options doesn\'t matter.
  exit
fi

if $VERSION; then
  echo build-pathway version $LASTMOD
  exit
fi

if test README.html -ot README.adoc; then
  asciidoctor -a linkcss README.adoc
fi

echo '== Generated Documentation' > index.adoc
echo >> index.adoc
echo link:README.html[Authoring Guide] >> index.adoc
echo >> index.adoc
echo https://github.com/bootstrapworld/curriculum[\`curriculum\` Repo] >> index.adoc

export SED=sed

if which gsed | grep -q .; then
  SED=gsed
fi

export TOPDIR=$(pwd)

if test ! -d distribution; then
  mkdir distribution
fi

cd distribution

echo '== Generated Documentation' > index.adoc

cd $TOPDIR

if test "$ARGS" = ""; then
  ARGS="pathways/*"
fi

if test ! -d prog; then
  mkdir prog
fi

PROGDIR=$TOPDIR/prog

cp -p $TOPDIR/lib/* $TOPDIR/lib/.hta* $PROGDIR

# just in case shared/langs/$LANGUAGE isn't sufficiently populated
cp -p $TOPDIR/shared/langs/en-us/* $PROGDIR

if test -d $TOPDIR/shared/langs/$LANGUAGE; then
  cp -p $TOPDIR/shared/langs/$LANGUAGE/* $PROGDIR
fi

#cp -p $TOPDIR/lib/.htp* distribution

function insertbodyid() {
  f=$1
  $SED -i \
    -e 's/<body[^>]*>/\0\n<div id="body">/' \
    -e 's/<\/body>/<\/div>\n\0/' \
    $f
}

function insertstylecss() {
  f=$1
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="\/styles.css">/' \
    $f
}

function removelogos() {
  f=$1
  $SED -i \
    -e '/^<h2 .*<img src="bootstraplogo.png"/d' \
    $f
}

function moveheaderlogopos() {
  f=$1
  $SED -ne '/^<h1>.*class="bootstraplogo".*<\/h1>$/p' $f > temp.txt
  $SED -i \
    -e 's/^<h1>\(.*\)\(<span class="bootstrapheader".*\)$/\1<h1>\2/' \
    temp.txt
  $SED -i \
    -e '/^<h1>.*class="bootstraplogo".*<\/h1>$/d' \
    -e '/^<div id="preamble">/r temp.txt' \
    $f
}

function cleanuptitle() {
  f=$1
  $SED -i \
    -e '/^<title>/ s/<\/*span[^>]*>//g' \
    $f
}

function addanalytics() {
  f=$1
  cp $PROGDIR/analytics.txt .
  $SED -i \
    -e '/^<body/r analytics.txt' \
    $f
}

function resolveabbrevs() {
  f=$1
  mathjaxneeded=
  codemirrorneeded=
  if grep -q @CURRICULUMSCRIPT $f; then
    mathjaxneeded=1
  fi
  if grep -q 'class=\"\(pyret\|racket\)\"' $f; then
    codemirrorneeded=1
  fi
  $SED -i \
    -e 's/@PYRETKEYWORD\([^@]*\)@END/<span class=pyretkeyword>\1<\/span>/g' \
    \
    -e 's/@CURRICULUMCOMMA/,/g' \
    \
    -e 's/<p>\(@CURRICULUMCOMMENT\)/\1/' \
    -e 's/\(@ENDCURRICULUMCOMMENT\)<.p>/\1/' \
    -e 's/@CURRICULUMCOMMENT/<!-- /' \
    -e 's/@ENDCURRICULUMCOMMENT/\n-->/' \
    \
    -e 's/@CURRICULUM\(div\|pre\|span\|textarea\|tt\)/<\1/g' \
    -e 's/@BEGINCURRICULUM\(div\|pre\|span\|textarea\|tt\)/>/g' \
    -e 's/@ENDCURRICULUM\(div\|pre\|span\|textarea\|tt\)/<\/\1>/g' \
    \
    -e 's/@CURRICULUMSCRIPT/<script type="math\/tex"/g' \
    -e 's/@BEGINCURRICULUMSCRIPT/>/g' \
    -e 's/@ENDCURRICULUMSCRIPT/<\/script>/g' \
    \
    -e 's/&#8656;/\&lt;=/g' \
    -e 's/&#8594;/-\&gt;/g' \
    \
    $f
  if test "$mathjaxneeded" != ""; then
    cat > mathjax.txt <<EOF
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML%2Chttp%3A%2F%2Fwww.cs.wpi.edu%2F%7Ekfisler%2Fmathjaxlocal.js"></script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/@INSERTMATHJAX\0/' \
      -e '/@INSERTMATHJAX/r mathjax.txt' \
      -e 's/@INSERTMATHJAX//' \
      $f
  fi
  if test "$codemirrorneeded" != ""; then
    cat > codemirror.txt <<EOF
    <link rel="stylesheet" href="${PATHWAYROOTDIR}pretty-printing.css" />
    <link rel="stylesheet" href="${PATHWAYROOTDIR}codemirror.css" />
    <script type="text/javascript" src="${PATHWAYROOTDIR}codemirror.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}runmode.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}scheme2.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}pyret-mode.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}bootstraplesson.js"></script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/@INSERTCODEMIRROR\0/' \
      -e '/@INSERTCODEMIRROR/r codemirror.txt' \
      -e 's/@INSERTCODEMIRROR//' \
      $f
  fi
  tif=${f%.*}-comment.txt
  if test -f $tif; then
    $SED -i \
      -e '/^<body[^>]*>/s/<body[^>]*>/\0@INSERTCURRICULUMCOMMENT/' \
      -e '/@INSERTCURRICULUMCOMMENT/r '$tif \
      -e 's/@INSERTCURRICULUMCOMMENT//' \
      $f
  fi
}

function rmproglangsubdirs() {
  d=$1
  for f in pyret wescheme; do
    if test -d $d/$f; then
      rm -fr $d/$f
    fi
  done
}

function buildworkbookpages() {
  L=$1
  echo
  #echo building $L workbook-pages
  cd $L
  #
  if test -d workbook-pages/$PROGLANG; then
    cp -p workbook-pages/$PROGLANG/* workbook-pages
  fi
  rmproglangsubdirs workbook-pages
  #
  cp -pr workbook-pages solutions-pages
  cp -p $PROGDIR/.hta* solutions-pages
  if test -d workbook-sols-pages; then
    for f in workbook-sols-pages/*; do
      if test -f $f; then
        cp -p $f solutions-pages
      fi
    done
    if test -d workbook-sols-pages/$PROGLANG; then
      cp -p workbook-sols-pages/$PROGLANG/* solutions-pages
    fi
    rm -fr workbook-sols-pages
  fi
  mv solutions-pages workbook-sols-pages
  rmproglangsubdirs workbook-sols-pages
  #
  if test -d exercises; then
    if test -d exercises/$PROGLANG; then
      cp -p exercises/$PROGLANG/* exercises
    fi
    rmproglangsubdirs exercises
    cp -pr exercises exercises-sols
  fi
  #
  for d in *; do
    if test -d $d; then
      if test -d $d/$PROGLANG; then
        cp -p $d/$PROGLANG/* $d
      fi
      rmproglangsubdirs $d
    fi
  done
  #
  for d in exercises exercises-sols workbook-pages workbook-sols-pages; do
    if test -d $d; then
      if test $d = "exercises";             then dd="exercises          "
      elif test $d = "exercises-sols";      then dd="exercises-sols     "
      elif test $d = "workbook-pages";      then dd="workbook-pages     "
      elif test $d = "workbook-sols-pages"; then dd="workbook-sols-pages"
      fi
      #echo \(building $L "->" $d\)
      unset EXERCISE SOLUTION WORKBOOK
      if test $d = "workbook-pages"; then
        export WORKBOOK=1
      elif test $d = "workbook-sols-pages"; then
        export SOLUTION=1
      elif test $d = "exercises"; then
        export EXERCISE=1
      elif test $d = "exercises-sols"; then
        export SOLUTION=1
        export EXERCISE=1
      fi
      cd $d
      export PATHWAYROOTDIR="../../../"
      #cp -p $PROGDIR/*.css .
      for f in *.adoc; do
        if test ! -f $f; then
          echo No adoc files in lesson $L/$d
        else
          echo building $PATHWAY "→" $L "→" "$dd" "→" $f
          $PROGDIR/adoc-preproc.rkt $f
          fhtml=${f%.adoc}.html
          fpdf=${f%.adoc}.pdf
          resolveabbrevs $fhtml
          if ! $NOPDF; then
            wkhtmltopdf --margin-left '0mm' --margin-right '0mm' --lowquality --print-media-type -q $fhtml $fpdf
          fi
        fi
      done
      unset EXERCISE SOLUTION WORKBOOK
      cd ..
    fi
  done
  cd ..
}

function buildlessonplan() {
  #echo doing buildlessonplan
  L=$1
  echo
  #echo building $PATHWAY "->" $L lesson plan
  cd $L
  copacetic=1
  for f in *.adoc; do
    if test ! -f $f; then
      copacetic=
    fi
  done
  if test ! "$copacetic"; then
    echo WARNING: No lesson plan in lesson $L
  elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo WARNING: Too many lesson plans in lesson $L
  else
    #cp -p $PROGDIR/*.css .
    export PATHWAYROOTDIR="../../"
    # there should be only one?
    #echo building lesson plan from *.adoc
    echo building lesson plan: $PATHWAY "→" $L "→" *.adoc
    $PROGDIR/adoc-preproc.rkt *.adoc
    if test ! -f index.html; then
      SRCFILE=
      for g in *.adoc; do
        SRCFILE=${g%.adoc}
        cp -p $SRCFILE.asc index.asc
        cp -p $SRCFILE.html index.html
      done
      if test -n "$SRCFILE"; then
        rm $SRCFILE.html $SRCFILE.asc
      fi
    fi
    addanalytics index.html
    resolveabbrevs index.html
    moveheaderlogopos index.html
    cleanuptitle index.html
    if ! $NOPDF; then
      #echo Creating lesson plan pdf
      wkhtmltopdf --lowquality --print-media-type -q index.html index.pdf
    fi
  fi
  cd ..
}

function buildlessons() {
  #echo doing buildlessons
  cd lessons
  for L in *; do
    if test ! -d $L; then
      echo WARNING: No lessons in pathway $PATHWAY
    else
      export LESSON=$L
      buildworkbookpages $L
      export LESSONPLAN=$L
      buildlessonplan $L
      unset LESSONPLAN
      unset LESSON
    fi
  done
  cd ..
}

function buildpathway() {
  cd $TOPDIR

  PATHWAY=$SRCPATHWAY

  # special-casing only algebra and bs-game-pathway,
  # as they're the only pathways that allow two prog langs
  if test "$SRCPATHWAY" = bs-game-pathway -o \
          "$SRCPATHWAY" = algebra; then
    PATHWAY=$SRCPATHWAY-$PROGLANG
  elif test "$PROGLANG" = wescheme; then
    PATHWAY=$SRCPATHWAY-wescheme
  fi

  langicon=🕱

  if test "$PROGLANG" = wescheme; then
    langicon=🥾
  fi

  if test ! -d distribution/$PATHWAY; then
    mkdir distribution/$PATHWAY
  fi
  # remove previous build of $PATHWAY in distribution/, if any
  if test -d distribution/$PATHWAY/$LANGUAGE; then
    rm -fr distribution/$PATHWAY/$LANGUAGE
  fi
  cp -pr pathways/$SRCPATHWAY/langs/$LANGUAGE distribution/$PATHWAY/$LANGUAGE
  cp -p $PROGDIR/*.png $PROGDIR/*.css $PROGDIR/*.js distribution/$PATHWAY/$LANGUAGE

  echo

  if test ! -d distribution/$PATHWAY/$LANGUAGE; then
    echo WARNING: No pathway $PATHWAY/$LANGUAGE
  else
    echo building pathway: $PATHWAY/$LANGUAGE $langicon
    cd distribution/$PATHWAY/$LANGUAGE

    mkdir lessons workbook
    mkdir -p resources/protected
    cp -p $PROGDIR/.hta* resources/protected

    if test ! -f workbook-index.rkt; then
      echo WARNING: No workbook-index.rkt in pathway $PATHWAY/$LANGUAGE
    else
      $PROGDIR/copy-lessons.rkt
    fi

    buildlessons
    echo

    cd resources
    #cp -p $PROGDIR/*.css $PROGDIR/.hta* .
    cp -p $PROGDIR/.hta* .
    copacetic=1
    for f in *.adoc; do
      if test ! -f $f; then copacetic=
      fi
    done
    if test ! "$copacetic"; then
      echo WARNING: No teacher resource files in pathway $PATHWAY
    elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
      echo WARNING: Too many teacher resource files in pathway $PATHWAY
    else
      export PATHWAYROOTDIR="../"
      # there should be only one?
      export TEACHER_RESOURCES=1
      echo building teacher resources: $PATHWAY "→" "resources" "→" *.adoc
      $PROGDIR/adoc-preproc.rkt *.adoc
      unset TEACHER_RESOURCES
      if test ! -f index.html; then
        SRCFILE=
        for g in *.adoc; do
          SRCFILE=${g%.adoc}
          cp -p $SRCFILE.asc index.asc
          cp -p $SRCFILE.html index.html
        done
        if test -n "$SRCFILE"; then
          rm $SRCFILE.html $SRCFILE.asc
        fi
      fi
      resolveabbrevs index.html
      moveheaderlogopos index.html
      cleanuptitle index.html
    fi
    cd ..

    if test ! -f workbook-page-index.rkt; then
      echo WARNING: No workbook index file in pathway $PATHWAY/$LANGUAGE
    elif ! $NOPDF; then
      export PATHWAYROOTDIR=""
      #cp -p $PROGDIR/front-cover-teacher.pdf .
      echo
      echo building pathway workbooks: $PATHWAY
      if $DEBUG; then
        $PROGDIR/make-workbook.rkt >/dev/null 2>&1
      else
        $PROGDIR/make-workbook.rkt
      fi
      rm -f workbook-numbered.*
    fi

    copacetic=1
    for f in *.adoc; do
      if test ! -f $f; then copacetic=
      fi
    done
    if test ! "$copacetic"; then
      echo WARNING: No narrative in pathway $PATHWAY
    elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
      echo WARNING: Too many narratives in pathway $PATHWAY
    else
      #cp -p $PROGDIR/*.css .
      export PATHWAYROOTDIR=""
      export NARRATIVE=1
      # there should be only one?
      echo
      echo building pathway narrative: $PATHWAY "→" *.adoc
      $PROGDIR/adoc-preproc.rkt *.adoc
      unset NARRATIVE
      if test ! -f index.html; then
        SRCFILE=
        for g in *.adoc; do
          SRCFILE=${g%.adoc}
          cp -p $SRCFILE.asc index.asc
          cp -p $SRCFILE.html index.html
        done
        if test -n "$SRCFILE"; then
          rm $SRCFILE.html $SRCFILE.asc
        fi
      fi
      if test -f pathway-lessons.asc; then
        $PROGDIR/adoc-preproc.rkt pathway-lessons.asc
        removelogos pathway-lessons.html
        resolveabbrevs pathway-lessons.html
      fi
      mv index.html index.shtml
      insertbodyid index.shtml
      addanalytics index.shtml
      insertstylecss index.shtml
      resolveabbrevs index.shtml
      #moveheaderlogopos index.shtml
      #cleanuptitle index.shtml

      if $VERIFYLINKS; then
        linkchecker -F html/invalid-links.html --check-extern --no-status
      fi
    fi

  fi

  cd $TOPDIR

}

for f in $ARGS; do
  export SRCPATHWAY=$f
  export SRCPATHWAY=${SRCPATHWAY#pathways/}
  export SRCPATHWAY=${SRCPATHWAY%/}
  if test "$PROGLANG" = ""; then
    if test "$SRCPATHWAY" = bs-game-pathway -o \
            "$SRCPATHWAY" = algebra; then
      export PROGLANG=wescheme; buildpathway
      export PROGLANG=pyret; buildpathway
    else
      export PROGLANG=pyret; buildpathway
    fi
    unset PROGLANG
  else
    buildpathway
  fi
done

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in distribution/*/*; do
  f=${f%/}
  g=${f#distribution/}
  pwy=${g%/*}
  lang=${g#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:$docf[$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor -a linkcss index.adoc

cd distribution

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in */*; do
  f=${f%/}
  pwy=${f%/*}
  lang=${f#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:$docf[$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor -a linkcss index.adoc

if ! $DEBUG; then
  rm -fr $PROGDIR
  for f in adoc asc rkt title txt; do
    find . -name \*.$f -delete
  done
fi
