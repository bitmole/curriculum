# build-pathway
# build script for curriculum
# Type build-pathway --help for help.

export DEBUG=
export FORCE=false
export LANGUAGE=en-us
export PROGLANG=
export TOPDIR=$(pwd)

ARGS=
HELP=false
LASTMOD=2020-03-17 # last modified
NOPDF=false
PDFMARGIN=0mm
SED=sed
TMPHTML=tmp0.html
VERIFYLINKS=false
VERSION=false

while test $# -ne 0; do
  arg=$1; shift
  if test "$arg" = --debug -o "$arg" = -d; then
    DEBUG=1
  elif test "$arg" = --force -o "$arg" = -f; then
    FORCE=true
  elif test "$arg" = -fd -o "$arg" = -df; then
    DEBUG=1; FORCE=true
  elif test "$arg" = --help; then
    HELP=true
  elif test "$arg" = --language; then
    LANGUAGE=$1; shift
  elif test "$arg" = --nopdf; then
    NOPDF=true
  elif test "$arg" = --proglang; then
    PROGLANG=$1; shift
  elif test "$arg" = --verify-links; then
    if which linkchecker | grep -q .; then
      VERIFYLINKS=true;
    fi
  elif test "$arg" = --version; then
    VERSION=true;
  else
    ARGS="$ARGS $arg"
  fi
done

function displayhelp() {
  echo Usage: build-pathway [--language L] [--proglang P] [--debug] [--nopdf] [--help] pathway ...
  echo
  echo Builds a document tree for the given pathway argument\(s\)
  echo under the \'distribution\' directory. If no pathway arg supplied,
  echo builds for all pathways in the \'pathways\' directory.
  echo
  echo Options:
  echo "  " --help: Display this help and exit.
  echo "  " --language L: Build doctree for natural language L. Default: en-us
  echo "  " --proglang P: Build doctree for programming language P.
  echo "             " P is one of wescheme, pyret.
  echo "             " An appropriate default is used depending on the pathway.
  echo "  " --debug: Keep around for inspection/debugging various temp files
  echo "           " in the 'distribution' directory.
  echo "  " --nopdf: Don\'t generate PDF files. This is to speed things up
  echo "           " during debugging when PDF output isn\'t necessary.
  echo "  " --verify-links: Verify all the links used in the doctree. A copy of
  echo "                  " the report is also stored in invalid-links.html
  echo "                  " in the pathway doctree\'s top directory.
  echo "  " --version: Display build-way version and exit.
  echo
  echo Order of arguments/options doesn\'t matter.
  exit
}

if $HELP; then displayhelp; fi

if $VERSION; then
  echo build-pathway version $LASTMOD
  exit
fi

if which gsed | grep -q .; then
  SED=gsed
fi

if test "$ARGS" = ""; then
  ARGS="pathways/*"
fi

if test README.html -ot README.adoc; then
  asciidoctor -a linkcss README.adoc
fi

echo '== Generated Documentation' > index.adoc
echo >> index.adoc
echo link:README.html[Authoring Guide] >> index.adoc
echo >> index.adoc
echo https://github.com/bootstrapworld/curriculum[\`curriculum\` Repo] >> index.adoc

mkdir -p distribution

cd distribution

echo '== Generated Documentation' > index.adoc

cd $TOPDIR

mkdir -p prog

PROGDIR=$TOPDIR/prog

cp -p $TOPDIR/lib/* $TOPDIR/lib/.hta* $PROGDIR

# if $LANGUAGE != en-us, and
# shared/langs/$LANGUAGE isn't sufficiently populated,
# we'll put in the en-us files first and shadow them later
#
cp -p $TOPDIR/shared/langs/en-us/* $PROGDIR

if test $LANGUAGE != en-us -a -d $TOPDIR/shared/langs/$LANGUAGE; then
  cp -p $TOPDIR/shared/langs/$LANGUAGE/* $PROGDIR
fi

#cp -p $TOPDIR/lib/.htp* distribution

function insertbodyid() {
  local f=$1
  $SED -i \
    -e 's/<body[^>]*>/\0\n<div id="body">/' \
    -e 's/<\/body>/<\/div>\n\0/' \
    $f
}

function insertstylecss() {
  local f=$1
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="\/styles.css">/' \
    $f
}

function insertnarrativecss() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|sed -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/narrative.css" \/>/' \
    $f
}

function insertprintcss() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|sed -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/wkhtmltopdf.css" \/>/' \
    $f
}

function insertprintcss_browser() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|sed -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/browser-wkhtmltopdf.css" \/>/' \
    $f
}

function insertwbpagecss() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|sed -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/wbpage.css" \/>/' \
    $f
}

function insertwbpagecss_browser() {
  local f=$1
  local spwd=$(echo $PATHWAYROOTDIR|sed -e 's/\//\\\//g')
  $SED -i \
    -e 's/<link.*curriculum.css.*>/\0\n<link rel="stylesheet" href="'$spwd'lib\/browser-wbpage.css" \/>/' \
    $f
}

function removelogos() {
  local f=$1
  $SED -i \
    -e '/^<h2 .*<img src="bootstraplogo.png"/d' \
    $f
}

function moveheaderlogopos() {
  local f=$1
  $SED -ne '/^<h1>.*class="bootstraplogo".*<\/h1>$/p' $f > temp.txt
  $SED -i \
    -e 's/^<h1>\(.*\)\(<span class="bootstrapheader".*\)$/\1<h1>\2/' \
    temp.txt
  $SED -i \
    -e '/^<h1>.*class="bootstraplogo".*<\/h1>$/d' \
    -e '/^<div id="content">/r temp.txt' \
    $f
}

function cleanuptitle() {
  local f=$1
  $SED -i \
    -e '/^<title>/ s/<\/*span[^>]*>//g' \
    $f
}

function addanalytics() {
  local f=$1
  cp $PROGDIR/analytics.txt .
  $SED -i \
    -e '/^<body/r analytics.txt' \
    $f
}

function resolveabbrevs() {
  local f=$1
  local mathjaxneeded=false
  local codemirrorneeded=false
  if grep -q %CURRICULUMSCRIPT $f; then
    mathjaxneeded=true
  fi
  if grep -q 'class=\"\(pyret\|racket\)\"' $f; then
    codemirrorneeded=true
  fi
  $SED -i \
    -e 's/%PYRETKEYWORD%\([^%]*\)%END%/<span class=pyretkeyword>\1<\/span>/g' \
    \
    -e 's/%CURRICULUMCOMMA%/,/g' \
    \
    -e 's/<p>\(%CURRICULUMCOMMENT%\)/\1/' \
    -e 's/\(%ENDCURRICULUMCOMMENT%\)<.p>/\1/' \
    -e 's/%CURRICULUMCOMMENT%/<!-- /' \
    -e 's/%ENDCURRICULUMCOMMENT%/\n-->/' \
    \
    -e 's/%CURRICULUMSCRIPT%/<script type="math\/tex"/g' \
    -e 's/%BEGINCURRICULUMSCRIPT%/>/g' \
    -e 's/%ENDCURRICULUMSCRIPT%/<\/script>/g' \
    \
    -e 's/%CURRICULUM\([^%]*\)%/<\1/g' \
    -e 's/%BEGINCURRICULUM\([^%]*\)%/>/g' \
    -e 's/%ENDCURRICULUM\([^%]*\)%/<\/\1>/g' \
    \
    -e 's/&#8656;/\&lt;=/g' \
    -e 's/&#8594;/-\&gt;/g' \
    \
    -e 's/^\(<div id="preamble\)">/\1_disabled">/' \
    $f
  if "$mathjaxneeded"; then
    cat > mathjax.txt <<EOF
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML%2Chttp%3A%2F%2Fwww.cs.wpi.edu%2F%7Ekfisler%2Fmathjaxlocal.js"></script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/%INSERTMATHJAX\0/' \
      -e '/%INSERTMATHJAX/r mathjax.txt' \
      -e 's/%INSERTMATHJAX//' \
      $f
  fi
  if "$codemirrorneeded"; then
    cat > codemirror.txt <<EOF
    <link rel="stylesheet" href="${PATHWAYROOTDIR}pretty-printing.css" />
    <link rel="stylesheet" href="${PATHWAYROOTDIR}codemirror.css" />
    <script type="text/javascript" src="${PATHWAYROOTDIR}codemirror.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}runmode.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}scheme2.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}pyret-mode.js"></script>
    <script type="text/javascript" src="${PATHWAYROOTDIR}bootstraplesson.js"></script>
EOF
    $SED -i \
      -e '/^<link.*curriculum\.css/s/^/%INSERTCODEMIRROR\0/' \
      -e '/%INSERTCODEMIRROR/r codemirror.txt' \
      -e 's/%INSERTCODEMIRROR//' \
      $f
  fi
  tif=${f%.*}-comment.txt
  if test -f $tif; then
    $SED -i \
      -e '/^<body[^>]*>/s/<body[^>]*>/\0%INSERTCURRICULUMCOMMENT/' \
      -e '/%INSERTCURRICULUMCOMMENT/r '$tif \
      -e 's/%INSERTCURRICULUMCOMMENT//' \
      $f
  fi
}

function rmproglangsubdirs() {
  local d=$1
  for f in pyret wescheme; do
    if test -d $d/$f; then
      rm -fr $d/$f
    fi
  done
}

function buildworkbookpages() {
  local L=$1
  #echo
  #echo building $L workbook-pages
  cd $L
  #
  if test ! -d workbook-pages; then
    echo WARNING: $L missing workbook-pages
    mkdir workbook-pages
  fi
  if test -d workbook-pages/$PROGLANG; then
    cp -p workbook-pages/$PROGLANG/* workbook-pages
  fi
  rmproglangsubdirs workbook-pages
  #
  if test -d solutions-pages; then
    echo deadc0de: solutions-pages shouldnt exist
  fi
  cp -pr workbook-pages solutions-pages
  cp -p $PROGDIR/.hta* solutions-pages
  if test -d workbook-sols-pages; then
    for f in workbook-sols-pages/*; do
      if test -f "$f"; then
        cp -p "$f" solutions-pages
      fi
    done
    if test -d workbook-sols-pages/$PROGLANG; then
      cp -p workbook-sols-pages/$PROGLANG/* solutions-pages
    fi
    rm -fr workbook-sols-pages
  fi
  mv solutions-pages workbook-sols-pages
  rmproglangsubdirs workbook-sols-pages
  #
  if test -d exercises; then
    if test -d exercises/$PROGLANG; then
      cp -p exercises/$PROGLANG/* exercises
    fi
    rmproglangsubdirs exercises
    mkdir -p exercises-sols
    cp -pr exercises/* exercises-sols
  fi
  #
  for d in *; do
    if test -d $d; then
      if test -d $d/$PROGLANG; then
        cp -p $d/$PROGLANG/* $d
      fi
      rmproglangsubdirs $d
    fi
  done
  #
  for d in *; do
    if test -d $d; then
      if test $d = "exercises";             then dd="exercises          "
      elif test $d = "exercises-sols";      then dd="exercises-sols     "
      elif test $d = "workbook-pages";      then dd="workbook-pages     "
      elif test $d = "workbook-sols-pages"; then dd="workbook-sols-pages"
      else                                       dd=$d
      fi
      #echo \(building $L "->" $d\)
      unset EXERCISE SOLUTION WORKBOOK OTHERDIR LESSONSUBDIR
      if test $d = "workbook-pages"; then
        export WORKBOOK=1
      elif test $d = "workbook-sols-pages"; then
        export SOLUTION=1
      elif test $d = "exercises"; then
        export EXERCISE=1
      elif test $d = "exercises-sols"; then
        export SOLUTION=1
        export EXERCISE=1
      else
        export OTHERDIR=1
      fi
      export LESSONSUBDIR=$d
      cd $d
      export PATHWAYROOTDIR="../../../"
      #cp -p $PROGDIR/*.css .
      for f in *.adoc; do
        if test ! -f "$f"; then
          echo No adoc files in lesson $L/$d
        elif echo $f|grep -q ' '; then
          echo Discarding file \`$f\` with space in its name
          rm "$f"
        else
          fhtml=${f%.adoc}.html
          fasc=${f%.adoc}.asc
          DOIT=false
          if test $OTHERDIR; then
            if test $f -nt $fasc; then DOIT=true; fi
          else
            if test $f -nt $fhtml; then DOIT=true; fi
          fi
          if $DOIT; then
            echo building $PATHWAY "→" $L "→" "$dd" "→" $f
            $PROGDIR/adoc-preproc.rkt $f
            if test -f $fhtml; then
              resolveabbrevs $fhtml
              insertprintcss_browser $fhtml
              insertwbpagecss_browser $fhtml
            fi
          fi
          if ! $NOPDF; then
            fpdf=${fhtml%.html}.pdf
            if test -f $fhtml -a $fhtml -nt $fpdf; then
              cp -p $fhtml $TMPHTML
              insertprintcss $TMPHTML
              insertwbpagecss $TMPHTML
              ASPECT=
              if head -5 $f|grep -q '^ *\[\.landscape\] *$'; then
                ASPECT="-O Landscape --margin-top $PDFMARGIN"
              fi
              wkhtmltopdf --margin-bottom $PDFMARGIN --margin-left $PDFMARGIN --margin-right $PDFMARGIN $ASPECT --lowquality -q $TMPHTML $fpdf
              NUMPAGES=$(pdftk $fpdf dump_data|grep NumberOfPages|sed -e 's/NumberOfPages:  *\([0-9][0-9]*\).*/\1/')
              if test "$NUMPAGES" != 1; then
                echo WARNING: $fpdf has $NUMPAGES pages
              fi
              if test ! $DEBUG; then
                rm $TMPHTML
              fi
            fi
          fi
        fi
      done
      unset EXERCISE SOLUTION WORKBOOK OTHERDIR LESSONSUBDIR
      cd ..
    fi
  done
  cd ..
}

function collapseadjtables() {
  local f=$1
  local x=$(grep -n '^<\/*tbody>' "$f"|sed -e 's/^\([^:]*\):.*/\1/'|sed -ne '2,3p')
  if test -z "$x"; then
    return
  fi
  local xi=$(echo $x|sed -e 's/^\([^ ]*\) .*/\1/')
  local xii=$(echo $x|sed -e 's/^[^ ]* \([^ ]*\).*/\1/')
  if test -z "$xi" -o -z "$xii"; then
    return
  fi
  sed -i -e "$xi,${xii}d" "$f"
}

function buildlessonplan() {
  #echo doing buildlessonplan
  local L=$1
  #echo
  #echo building $PATHWAY "->" $L lesson plan
  cd $L
  local copacetic=true
  for f in *.adoc; do
    if test ! -f $f; then
      copacetic=false
    fi
  done
  if ! "$copacetic"; then
    echo WARNING: No lesson plan in lesson $L
  elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo WARNING: Too many lesson plans in lesson $L
  else
    #cp -p $PROGDIR/*.css .
    export PATHWAYROOTDIR="../../"
    # there should be only one?
    #echo building lesson plan from *.adoc
    for f in *.adoc; do
      cp -p $f index.asciidoc
    done
    if test index.asciidoc -nt index.html; then
      echo building lesson plan: $PATHWAY "→" $L "→" *.adoc
      $PROGDIR/adoc-preproc.rkt index.asciidoc
      #makeglossaryandstandards
      #collapseadjtables index.html
      #collapseadjtables index.html # do it twice!
      addanalytics index.html
      resolveabbrevs index.html
      moveheaderlogopos index.html
      insertnarrativecss index.html
      insertprintcss_browser index.html
      cleanuptitle index.html
    fi
    if ! $NOPDF; then
      #echo Creating lesson plan pdf
      if test index.html -nt index.pdf; then
        cp index.html $TMPHTML
        insertprintcss $TMPHTML
        wkhtmltopdf --lowquality -q $TMPHTML index.pdf
        if test ! $DEBUG; then
          rm $TMPHTML
        fi
      fi
    fi
  fi
  cd ..
}

function buildlessons() {
  #echo doing buildlessons
  cd lessons
  if test ! -f lessons.txt; then
    echo WARNING: No lessons in pathway $PATHWAY
  else
    for L in $(cat lessons.txt); do
      export LESSON=$L
      buildworkbookpages $L
      #export LESSONPLAN=$L
      #buildlessonplan $L
      #unset LESSONPLAN
      unset LESSON
    done
  fi
  cd ..
}

function buildlessonplans() {
  echo buildlessonplans in $(pwd)
  cd lessons
  if test ! -f lessons.txt; then
    echo WARNING: No lessons in pathway $PATHWAY
  else
    for L in $(cat lessons.txt); do
      # needed?
      export LESSON=$L
      export LESSONPLAN=$L
      buildlessonplan $L
      unset LESSONPLAN
      unset LESSON
    done
  fi
  cd ..
}

function makeglossaryandstandards() {
  if test -f pathway-glossary.asc; then
    asciidoctor -a linkcss -a proglang=$PROGLANG -a pathway=$SRCPATHWAY \
      -a stylesheet=${PATHWAYROOTDIR}curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -a title='Glossary' \
      -o pathway-glossary.shtml \
      pathway-glossary.asc
          insertbodyid pathway-glossary.shtml
          insertstylecss pathway-glossary.shtml
          resolveabbrevs pathway-glossary.shtml
  fi
  if test -f pathway-standards.asc; then
    asciidoctor -a linkcss -a proglang=$PROGLANG -a pathway=$SRCPATHWAY \
      -a stylesheet=${PATHWAYROOTDIR}curriculum.css \
      -a pathwayrootdir=$PATHWAYROOTDIR \
      -a title='Standards' \
      -o pathway-standards.shtml \
      pathway-standards.asc
          insertbodyid pathway-standards.shtml
          insertstylecss pathway-standards.shtml
          resolveabbrevs pathway-standards.shtml
  fi
}

function buildpathwaynarrative() {
  local copacetic=true
  for f in *.adoc; do
    if test ! -f $f; then copacetic=false
    fi
  done
  if ! "$copacetic"; then
    echo WARNING: No narrative in pathway $PATHWAY\; creating one
    echo "= $PATHWAY" > index.adoc
  fi
  if ls *.adoc | wc -l | grep -vq '^ *1$'; then
    echo WARNING: Too many narratives in pathway $PATHWAY
  else
    #cp -p $PROGDIR/*.css .
    export PATHWAYROOTDIR=""
    # there should be only one?
    #echo
    for f in *.adoc; do
      cp -p $f index.asciidoc
    done
    if test index.asciidoc -nt index.shtml; then
      echo building pathway narrative: $PATHWAY "→" *.adoc
      export NARRATIVE=1
      $PROGDIR/adoc-preproc.rkt index.asciidoc
      unset NARRATIVE
      makeglossaryandstandards
      if test -f pathway-lessons.asciidoc; then
        if test pathway-lessons.asciidoc -nt pathway-lessons.html; then
          $PROGDIR/adoc-preproc.rkt pathway-lessons.asciidoc
          removelogos pathway-lessons.html
          resolveabbrevs pathway-lessons.html
        fi
      fi
      mv index.html index.shtml
      insertbodyid index.shtml
      addanalytics index.shtml
      insertstylecss index.shtml
      resolveabbrevs index.shtml
      #moveheaderlogopos index.shtml
      insertnarrativecss index.shtml
      #cleanuptitle index.shtml
    fi

    if $VERIFYLINKS; then
      linkchecker -F html/invalid-links.html --check-extern --no-status
    fi
  fi
}

function buildpathway() {
  cd $TOPDIR

  PATHWAY=$SRCPATHWAY

  # special-casing only algebra and game-pathway,
  # as they're the only pathways that allow two prog langs
  if test "$SRCPATHWAY" = game-pathway -o \
          "$SRCPATHWAY" = algebra; then
    PATHWAY=$SRCPATHWAY-$PROGLANG
  elif test "$PROGLANG" = wescheme; then
    PATHWAY=$SRCPATHWAY-wescheme
  fi

  langicon=🕱

  if test "$PROGLANG" = wescheme; then
    langicon=🥾
  fi

  echo

  if test ! -d pathways/$SRCPATHWAY/langs/$LANGUAGE; then
    echo WARNING: No pathway $PATHWAY/$LANGUAGE
  else
    echo building pathway: $PATHWAY/$LANGUAGE $langicon
    mkdir -p distribution/$PATHWAY

    if $FORCE; then
      rm -fr distribution/$PATHWAY/$LANGUAGE
      cp -pr pathways/$SRCPATHWAY/langs/$LANGUAGE distribution/$PATHWAY/$LANGUAGE
    else
      mkdir -p distribution/$PATHWAY/$LANGUAGE
      cp -pr pathways/$SRCPATHWAY/langs/$LANGUAGE/* distribution/$PATHWAY/$LANGUAGE
      #rsync -rt pathways/$SRCPATHWAY/langs/$LANGUAGE/* distribution/$PATHWAY/$LANGUAGE
      #exit
    fi

    mkdir -p distribution/$PATHWAY/$LANGUAGE/lib
    cp -p $PROGDIR/*.png $PROGDIR/*.css $PROGDIR/*.js distribution/$PATHWAY/$LANGUAGE/lib

    cd distribution/$PATHWAY/$LANGUAGE

    # XXX probably not needed?
    if test -f lessons-and-standards.rkt; then
      cp -p lessons-and-standards.rkt $PROGDIR
    fi

    mkdir -p lessons workbook
    mkdir -p resources/protected
    cp -p $PROGDIR/.hta* resources/protected

    if test ! -f lesson-order.rkt; then
      # XXX: transitional only
      if test -f workbook-index.rkt; then
        cp -p workbook-index.rkt lesson-order.rkt
      fi
    fi

    if test ! -f lesson-order.rkt; then
      echo WARNING: No lesson-order.rkt in pathway $PATHWAY/$LANGUAGE
    else
      $PROGDIR/copy-lessons.rkt
    fi

    buildlessons
    #echo

    cd resources
    #cp -p $PROGDIR/*.css $PROGDIR/.hta* .
    cp -p $PROGDIR/.hta* .
    local copacetic=true
    for f in *.adoc; do
      if test ! -f $f; then copacetic=false
      fi
    done
    if ! "$copacetic"; then
      echo WARNING: No teacher resource files in pathway $PATHWAY
    elif ls *.adoc | wc -l | grep -vq '^ *1$'; then
      echo WARNING: Too many teacher resource files in pathway $PATHWAY
    else
      export PATHWAYROOTDIR="../"
      # there should be only one?
      for f in *.adoc; do
        cp -p $f index.asciidoc
      done
      if test index.asciidoc -nt index.html; then
        echo building teacher resources: $PATHWAY "→" "resources" "→" *.adoc
        export TEACHER_RESOURCES=1
        $PROGDIR/adoc-preproc.rkt index.asciidoc
        unset TEACHER_RESOURCES
        resolveabbrevs index.html
        moveheaderlogopos index.html
        cleanuptitle index.html
      fi
    fi
    cd ..

    if test ! -f workbook-page-index.rkt; then
      echo WARNING: No workbook index file in pathway $PATHWAY/$LANGUAGE
    elif ! $NOPDF; then
      export PATHWAYROOTDIR=""
      #cp -p $PROGDIR/front-cover-teacher.pdf .
      #echo
      #echo building pathway workbooks: $PATHWAY
      if test $DEBUG; then
        $PROGDIR/make-workbook.rkt
      else
        $PROGDIR/make-workbook.rkt >/dev/null 2>&1
      fi
      rm -f workbook-numbered.*
    fi

    buildlessonplans

    buildpathwaynarrative

  fi

  cd $TOPDIR

}

for f in $ARGS; do
  export SRCPATHWAY=$f
  export SRCPATHWAY=${SRCPATHWAY#pathways/}
  export SRCPATHWAY=${SRCPATHWAY%/}
  if test "$PROGLANG" = ""; then
    if test "$SRCPATHWAY" = game-pathway -o \
            "$SRCPATHWAY" = algebra; then
      export PROGLANG=wescheme; buildpathway
      export PROGLANG=pyret; buildpathway
    else
      export PROGLANG=pyret; buildpathway
    fi
    unset PROGLANG
  else
    buildpathway
  fi
done

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in distribution/*/*; do
  f=${f%/}
  g=${f#distribution/}
  pwy=${g%/*}
  lang=${g#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:$docf[$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor -a linkcss index.adoc

cd distribution

echo >> index.adoc
echo .{nbsp} >> index.adoc

for f in */*; do
  f=${f%/}
  pwy=${f%/*}
  lang=${f#*/}
  docf=$f/index.shtml
  if test -f $docf; then
    echo >> index.adoc
    echo \* link:$docf[$pwy Narrative \($lang\)] >> index.adoc
  fi
done

asciidoctor -a linkcss index.adoc

if test ! $DEBUG; then
  rm -fr $PROGDIR
  for f in adoc asciidoc rkt tex title txt; do
    find . -name \*.$f -delete
  done
fi
